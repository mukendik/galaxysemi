#include "ConnectionLM.h"


///////////////////////////////////////////////////////////////////////////////
// Class CConnectionLM - Class which describes a connection managed by GEX-LM
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CConnectionLM::CConnectionLM(const CEventLMClient& eventLMLogin, const CEventLMClient& eventLMLogout)
{
	m_strComputer	= eventLMLogin.computer();
	m_strUser		= eventLMLogin.user();
	m_dtLogin		= eventLMLogin.dateTime();
	m_dtLogout		= eventLMLogout.dateTime();
	m_lProductID	= eventLMLogin.productID();
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CConnectionLM::~CConnectionLM()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// 
// Name			:	long time() const
//
// Description	:	Calculate the connection time in seconds				
//
// Return		:	long	- 	Connection time in seconds
//
///////////////////////////////////////////////////////////////////////////////////
long CConnectionLM::time() const
{
	return m_dtLogin.secsTo(m_dtLogout);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class CConnectionGroup - Class which describes an group of connection (means by users, computers or all)
////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CConnectionGroup::CConnectionGroup()
{
	clear();
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CConnectionGroup::~CConnectionGroup()
{

}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// 
// Name			:	void addConnection(const CConnectionLM& connectionLM)
//
// Description	:	Add a connection to the group, and update the statistic				
//
// Param		:	connectionLM	[out]	Connection to add to the statistic
//
///////////////////////////////////////////////////////////////////////////////////
void CConnectionGroup::addConnection(const CConnectionLM& connectionLM)
{
	// Add the connection time to the total
	m_lTotalConnectionTime += connectionLM.time();

	// Increase the number of connection by 1
	m_lTotalConnection++;

	// Update the average connection time
	m_lMeanConnectionTime	= m_lTotalConnectionTime / m_lTotalConnection;
}

///////////////////////////////////////////////////////////////////////////////////
// 
// Name			:	void clear()
//
// Description	:	Clear datas already computed				
//
///////////////////////////////////////////////////////////////////////////////////
void CConnectionGroup::clear()
{
	m_lTotalConnectionTime	= 0;
	m_lMeanConnectionTime	= 0;
	m_lTotalConnection		= 0;
}