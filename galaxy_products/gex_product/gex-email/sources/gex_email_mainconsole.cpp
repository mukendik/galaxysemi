#include "gex_email_mainconsole.h"
#include "gexemail_constants.h"


///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexEmailMainConsole::CGexEmailMainConsole(const QString & strUserHome, const QString & strApplicationDir, const QString & strLocalFolder, const QString & strApplicationName)
			: QObject(), CGexEmailMainBase(strUserHome, strApplicationDir, strLocalFolder, strApplicationName)
{
	connect( m_pCore, SIGNAL(sCriticalMessage(const QString&)), this, SLOT(onCriticalMessage(const QString&)));
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexEmailMainConsole::~CGexEmailMainConsole()
{

}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// Initialize the core
/////////////////////////////////////////////////////////////////////////////////////
bool CGexEmailMainConsole::init(bool bStartEmailSpoolerAtLaunch, bool bAllowUserToSelectEmailSpoolingDir, bool bRunAsService, bool *pbExitApplication)
{
	return m_pCore->init(bStartEmailSpoolerAtLaunch, bAllowUserToSelectEmailSpoolingDir, bRunAsService, pbExitApplication);
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is going into pause mode
/////////////////////////////////////////////////////////////////////////////////////
void CGexEmailMainConsole::pause(void)
{
	m_pCore->pause();
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is resuming
/////////////////////////////////////////////////////////////////////////////////////
void CGexEmailMainConsole::resume(void)
{
	m_pCore->resume();
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is stopping
/////////////////////////////////////////////////////////////////////////////////////
void CGexEmailMainConsole::stop(void)
{
	m_pCore->stop();
}

/////////////////////////////////////////////////////////////////////////////////////
// // Called when a critical error is raised by the core
/////////////////////////////////////////////////////////////////////////////////////
void CGexEmailMainConsole::onCriticalMessage(const QString& strMessage)
{
	m_strCriticalMessage = strMessage;
	m_pCore->Log(GEXEMAIL_MSG_ERROR, QString(), m_strCriticalMessage);
}
