<html>
<head>
</head>
<body>
<table border="0" width="820" cellspacing="0" cellpadding="0">
  <tr>
    <td width="150" valign="top" align="left">
      <p align="left"> <img border="0" src="../images/index.png" width="170" height="40">
    </td>
    <td width="650"><b>Operators<br>
      </b><img border="0" src="../../html/images/ruler.png" width="616" height="8">
    </td>
  </tr>
  <tr>
    <td width="170" valign="top" align="left"><img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="scripting.htm">Introduction<br>
      </a><img border="0" src="../images/rarrow.png" width="6" height="9">  <a href="run1.htm">Running a
      Script</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="lang1.htm">Language<br>
      </a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="lang2.htm">Comments</a><br>
      &nbsp;&nbsp;&nbsp;&nbsp; <a href="lang3.htm">Numbers</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang4.htm">Literals</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang5.htm">Var
      and const</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang6.htm">Operators</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang7.htm">Statements
      and&nbsp; blocks</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang8.htm">Program
      flow</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang9.htm">Trace
      facility</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang10.htm">Exception
      handling</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang11.htm">Functions</a><br>
      &nbsp; &nbsp;&nbsp;&nbsp;<a href="lang12.htm">Predefined
      identifiers</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="direct1.htm">Directives</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="gex1.htm">Gex Report library</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="sys1.htm">System library</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="str1.htm">String library</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="math1.htm">Math library</a><br>
      <img border="0" src="../images/rarrow.png" width="6" height="9">
      <a href="file1.htm">File library</a><br>
    </td>
    <td width="650" valign="top" align="left">Operators in descending
      order of precedence:
      <p>&nbsp;
      <table cellSpacing="0" cellPadding="3" border="0">
        <tbody>
          <tr vAlign="top" bgColor="#0044aa">
            <td><font color="#ffffff"><b>Operators</b></font></td>
            <td bgColor="#0034aa"><font color="#ffffff"><b>Comments</b></font></td>
          </tr>
          <tr vAlign="top" bgColor="#c0e0ff">
            <td>( ) [ ]</td>
            <td bgColor="#b0d0ff">&nbsp;</td>
          </tr>
          <tr vAlign="top" bgColor="#e0f0ff">
            <td>! + - ++ -- &amp; sizeof exists</td>
            <td bgColor="#d0e0ff">Unary pre/postfixes. &amp; is only allowed in
              parameter lists</td>
          </tr>
          <tr vAlign="top" bgColor="#c0e0ff">
            <td>* / \ %</td>
            <td bgColor="#b0d0ff">\ is integer divide</td>
          </tr>
          <tr vAlign="top" bgColor="#e0f0ff">
            <td>- + |</td>
            <td bgColor="#d0e0ff">With + one or both operands may be a string
              (non-numeric) whereby string<br>
              concatenation is performed instead of a numeric add.<br>
              | is the string concatenation operator.</td>
          </tr>
          <tr vAlign="top" bgColor="#c0e0ff">
            <td>&lt; &lt;= &gt; &gt;=</td>
            <td bgColor="#b0d0ff">If one or both operands are strings, a
              literally string-compare will take place.</td>
          </tr>
          <tr vAlign="top" bgColor="#e0f0ff">
            <td>== !=</td>
            <td bgColor="#d0e0ff">If one or both operands are strings, a
              literally string-compare will take place.</td>
          </tr>
          <tr vAlign="top" bgColor="#c0e0ff">
            <td>&amp;&amp;</td>
            <td bgColor="#b0d0ff">Evaluation of A &amp;&amp; B:<br>
              In CSL, B will always be evaluated.<br>
              In C/C++, B will only be evaluated if A is true.</td>
          </tr>
          <tr vAlign="top" bgColor="#e0f0ff">
            <td>||</td>
            <td bgColor="#d0e0ff">Evaluation of A || B:<br>
              In CSL, B will always be evaluated.<br>
              In C/C++, B will only be evaluated if A is false.</td>
          </tr>
          <tr vAlign="top" bgColor="#c0e0ff">
            <td>= += -= *= /= \= %= |=</td>
            <td bgColor="#b0d0ff">With += source or target may be a string
              (non-numeric) whereby string<br>
              concatenation is performed instead of a numeric add.</td>
          </tr>
          <tr vAlign="top" bgColor="#e0f0ff">
            <td>,</td>
            <td bgColor="#d0e0ff">Comma is used to group several expressions
              into a single statement.</td>
          </tr>
        </tbody>
      </table>
      <p>There are no bitwise (| &amp; ^^ ~~) and no conditional (? :) operators
      in CSL.</p>
      <p>Expressions true/false evaluation:</p>
      <ul>
        <li>if the expression is a number, zero values are false and nonzero
          values are true.<li>if the expression is not a number, empty strings are false and nonempty
          are true.</li>
      </ul>
      <p>The <b>sizeof</b> operator returns 1 for simple var's. For arrays it
      returns the number of elements for the given<br>
      index:</p>
      <pre>var xy[5][4];

sizeof(xy);      // 20
sizeof xy[1];    // 4
sizeof xy[2][3]; // 1
</pre>
      <p>The <b>exists</b> operator checks if a variable exists and returns 1 or
      0. Within directives the condition is met if<br>
      the var/const is declared despite the fact indexes may be invalid. In
      script code the var/const must be<br>
      allocated and any indexes must be valid to return 1:</p>
      <pre>extern const a[];

#message exists maxSize       // 1, even if only declared but
                              //    not yet implemented
const a[3] = { 1, 2, 3 };

#message exists(maxSize[99])  // still 1, indexes are not checked!

foo()
{
   sysLog(exists a);      // 1
   sysLog(exists(a[1]));  // 1
   sysLog(exists a[99]);  // 0, indexes are checked in code!
}
</pre>
      <p>&nbsp;
    </td>
  </tr>
</table>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
</body>
</html>