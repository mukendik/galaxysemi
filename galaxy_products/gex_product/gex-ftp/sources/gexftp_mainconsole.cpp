#include "gexftp_mainconsole.h"


///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexFtpMainConsole::CGexFtpMainConsole(const QString & strUserHome, const QString & strApplicationDir, const QString & strLocalFolder, const QString & strApplicationName)
			: QObject(), CGexFtpMainBase(strUserHome, strApplicationDir, strLocalFolder, strApplicationName)
{
	connect( m_pCore, SIGNAL(sCriticalMessage(const QString&)), this, SLOT(onCriticalMessage(const QString&)));
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexFtpMainConsole::~CGexFtpMainConsole()
{

}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////
// Initialize the core
/////////////////////////////////////////////////////////////////////////////////////
bool CGexFtpMainConsole::init(bool bStartFtpSpoolerAtLaunch,
							  bool bRunAsService,
							  bool* pbExitApplication,
							  QtServiceController* /*pServiceController*/)
{
	return m_pCore->init(bStartFtpSpoolerAtLaunch, bRunAsService, pbExitApplication);
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is going into pause mode
/////////////////////////////////////////////////////////////////////////////////////
void CGexFtpMainConsole::pause(void)
{
	m_pCore->pause();
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is resuming
/////////////////////////////////////////////////////////////////////////////////////
void CGexFtpMainConsole::resume(void)
{
	m_pCore->resume();
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when service is stopping
/////////////////////////////////////////////////////////////////////////////////////
void CGexFtpMainConsole::stop(void)
{
	m_pCore->stop();
}

/////////////////////////////////////////////////////////////////////////////////////
// Called when a critical error is raised by the core
/////////////////////////////////////////////////////////////////////////////////////
void CGexFtpMainConsole::onCriticalMessage(const QString& strMessage)
{
	m_strCriticalMessage = strMessage;
	m_pCore->Log(GEXFTP_MSG_ERROR, QString(), m_strCriticalMessage);
}
