///////////////////////////////////////////////////////////////////////////////////
// GEX Includes
///////////////////////////////////////////////////////////////////////////////////
#include "gextestmapping.h"
#include "gex_constants.h"
#include "ctest.h"
#include "gqtl_datakeys_engine.h"

///////////////////////////////////////////////////////////////////////////////////
// External functions
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingName
//
// Description	:	Base class to map test name
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingName::CGexTestMappingName(CGexTestMappingName::MappingType eRule)
    : m_eType(eRule)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingName::~CGexTestMappingName()
{
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNameString
//
// Description	:	Class allowing to map a test name with a new one
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingNameString::CGexTestMappingNameString(const QString &oldTestName, const QString &newTestName)
    : CGexTestMappingName(typeString), mOldTestName(oldTestName), mNewTestName(newTestName)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingNameString::~CGexTestMappingNameString()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool map(QString &testName) const
//
// Description	:	map a test name by replacing it with a new one
//
///////////////////////////////////////////////////////////////////////////////////
bool CGexTestMappingNameString::map(QString &testName) const
{
    if (mOldTestName.compare(testName, Qt::CaseInsensitive) == 0)
    {
        testName = mNewTestName;
        return true;
    }

    return false;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	const QString &CGexTestMappingNameString::GetOldTestName() const
//
// Description	:	Returns Old test name
//
///////////////////////////////////////////////////////////////////////////////////
const QString &CGexTestMappingNameString::GetOldTestName() const
{
    return mOldTestName;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	const QString &CGexTestMappingNameString::GetNewTestName() const
//
// Description	:	Returns New test name
//
///////////////////////////////////////////////////////////////////////////////////
const QString &CGexTestMappingNameString::GetNewTestName() const
{
    return mNewTestName;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNameFunction
//
// Description	:	Class allowing to map a test name with a new one using a function
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingNameFunction::CGexTestMappingNameFunction(const QStringList &functions)
    : CGexTestMappingName(typeFunction), mFunctions(functions)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingNameFunction::~CGexTestMappingNameFunction()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool map(QString &testName) const
//
// Description	:	map a test name by replacing it with a new one
//
///////////////////////////////////////////////////////////////////////////////////
bool CGexTestMappingNameFunction::map(QString &testName) const
{
    // Check for Formula
    QString strName         = testName;
    QString strRegExp;
    QString strResult;
    QString strError;
    bool    bMatch          = false;
    bool    bValidResult    = false;
    bool    bMapped         = false;

    for (int indexFunction = 0; indexFunction < mFunctions.count(); ++indexFunction)
    {
        strRegExp   = testName + "." + mFunctions.at(indexFunction);
        strName     = testName;

        if(GS::QtLib::DatakeysEngine::evaluateExpression(strRegExp, strName, strResult, bMatch, bValidResult, strError))
        {
            if(bValidResult)
                testName = strResult;

            bMapped |= bValidResult;
        }
    }

    return bMapped;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	const QStringList &CGexTestMappingNameFunction::GetFunctions() const
//
// Description	:	Returns the used function
//
///////////////////////////////////////////////////////////////////////////////////
const QStringList &CGexTestMappingNameFunction::GetFunctions() const
{
    return mFunctions;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNumber
//
// Description	:	Base class to map test number list
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingNumber::CGexTestMappingNumber(const QString& strTestList, int nValue, CGexTestMappingNumber::MappingType eType) : m_rangeTest(strTestList.toLatin1().constData()), m_eType(eType), m_nValue(nValue)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingNumber::~CGexTestMappingNumber()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNumber create(const QString& strTestList, int nValue, MappingType eType)
//
// Description	:
//
///////////////////////////////////////////////////////////////////////////////////
CGexTestMappingNumber * CGexTestMappingNumber::create(const QString& strTestList, int nValue, MappingType eType)
{
    CGexTestMappingNumber * pMapping = NULL;

    switch (eType)
    {
        case CGexTestMappingNumber::typeOffset	:	pMapping = new CGexTestMappingNumberOffset(strTestList, nValue);
                                                    break;

        case CGexTestMappingNumber::typeNumber	:
        default									:	pMapping = new CGexTestMappingNumberValue(strTestList, nValue);
                                                    break;
    }

    return pMapping;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool contains(int nTestNumber) const
//
// Description	:	check if test list contains test number
//
///////////////////////////////////////////////////////////////////////////////////
bool CGexTestMappingNumber::contains(int nTestNumber) const
{
    return m_rangeTest.IsTestInList(nTestNumber, GEX_PTEST);
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNumberOffset
//
// Description	:	Class allowing to map a test number with an offset for a test list
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingNumberOffset::CGexTestMappingNumberOffset(const QString& strTestList, int nValue) : CGexTestMappingNumber(strTestList, nValue, CGexTestMappingNumber::typeOffset)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingNumberOffset::~CGexTestMappingNumberOffset()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	int map(int nTestNumber) const
//
// Description	:	map a test number by adding an offset
//
///////////////////////////////////////////////////////////////////////////////////
int CGexTestMappingNumberOffset::map(int nTestNumber) const
{
    if (contains(nTestNumber))
        return (nTestNumber + value());

    return nTestNumber;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMappingNumberValue
//
// Description	:	Class allowing to map a test number with another one for a test list
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMappingNumberValue::CGexTestMappingNumberValue(const QString& strTestList, int nValue) : CGexTestMappingNumber(strTestList, nValue, CGexTestMappingNumber::typeNumber)
{
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMappingNumberValue::~CGexTestMappingNumberValue()
{
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	int map(int nTestNumber) const
//
// Description	:	map a test number by replacing existing number by a new one
//
///////////////////////////////////////////////////////////////////////////////////
int CGexTestMappingNumberValue::map(int nTestNumber) const
{
    if (contains(nTestNumber))
        return value();

    return nTestNumber;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	CGexTestMapping
//
// Description	:	Class holding the mapping for tests
//
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
CGexTestMapping::CGexTestMapping()
{
    m_bActivated = false;
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
CGexTestMapping::~CGexTestMapping()
{
    for (int nMap = 0; nMap < m_lstMappedTestNumber.size(); nMap++)
        delete m_lstMappedTestNumber[nMap];

    for (int nMap = 0; nMap < m_lstMappedTestName.size(); nMap++)
        delete m_lstMappedTestName[nMap];

    m_lstMappedTestNumber.clear();
    m_lstMappedTestName.clear();
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool isMappedNumber(int nTestNumber) const
//
// Description	:	Execute the mapping
//
///////////////////////////////////////////////////////////////////////////////////
bool CGexTestMapping::isMappedNumber(int nTestNumber) const
{
    for (int nIndex = 0; nIndex < m_lstMappedTestNumber.size(); nIndex++)
    {
        if (m_lstMappedTestNumber.at(nIndex)->contains(nTestNumber))
            return true;
    }

    return false;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	void addMappedNumber(const QString& strTestList, int nValue, CGexTestMappingNumber::MappingType eType)
//
// Description	:	Add a test number to map
//
///////////////////////////////////////////////////////////////////////////////////
void CGexTestMapping::addMappedNumber(const QString& strTestList, int nValue, CGexTestMappingNumber::MappingType eType)
{
    m_lstMappedTestNumber.append(CGexTestMappingNumber::create(strTestList, nValue, eType));

    m_bActivated = true;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	void addMappedName(const QString& strOldName, const QString& strNewName)
//
// Description	:	Add a test name to map
//
///////////////////////////////////////////////////////////////////////////////////
void CGexTestMapping::addMappedName(const QString& strOldName, const QString& strNewName)
{
    m_lstMappedTestName.append(new CGexTestMappingNameString(strOldName, strNewName));

    m_bActivated = true;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	void addMappedName(const QStringList &function)
//
// Description	:	Add a function to map test name
//
///////////////////////////////////////////////////////////////////////////////////
void CGexTestMapping::addMappedName(const QStringList &functions)
{
    m_lstMappedTestName.append(new CGexTestMappingNameFunction(functions));

    m_bActivated = true;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	int mapNumber(int nTestNumber)
//
// Description	:	Map the test number
//
///////////////////////////////////////////////////////////////////////////////////
int CGexTestMapping::mapNumber(int nTestNumber) const
{
    for (int nIndex = 0; nIndex < m_lstMappedTestNumber.size(); nIndex++)
    {
        if (m_lstMappedTestNumber.at(nIndex)->contains(nTestNumber))
            return m_lstMappedTestNumber.at(nIndex)->map(nTestNumber);
    }

    return nTestNumber;
}

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool mapName(QString &strTestName) const
//
// Description	:	Map the test name
//
///////////////////////////////////////////////////////////////////////////////////
bool CGexTestMapping::mapName(QString &strTestName) const
{
    for (int nIndex = 0; nIndex < m_lstMappedTestName.size(); nIndex++)
    {
        if (m_lstMappedTestName.at(nIndex)->map(strTestName))
            return true;
    }

    return false;
}






