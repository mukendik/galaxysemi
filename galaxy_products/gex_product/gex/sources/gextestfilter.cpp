///////////////////////////////////////////////////////////////////////////////////
// GEX Includes
///////////////////////////////////////////////////////////////////////////////////
#include "gextestfilter.h"
#include "gextestfilterprivate.h"

///////////////////////////////////////////////////////////////////////////////////
// External functions
///////////////////////////////////////////////////////////////////////////////////

namespace GS
{
    namespace Gex
    {
    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilter
    //
    // Description	:	Class holding the filter for tests
    //
    ///////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////
    TestFilter::TestFilter()
    {
        m_pTestFilterPrivate = NULL;
    }

    ///////////////////////////////////////////////////////////
    // Destructor
    ///////////////////////////////////////////////////////////
    TestFilter::~TestFilter()
    {
        if (m_pTestFilterPrivate)
        {
            delete m_pTestFilterPrivate;
            m_pTestFilterPrivate = NULL;
        }
    }


    ///////////////////////////////////////////////////////////
    // Methods
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	QString TestFilter::rangeList() const
    //
    // Description	:   Returns the range list of the filter
    //
    ///////////////////////////////////////////////////////////////////////////////////
    QString TestFilter::GetRangeList() const
    {
        if (m_pTestFilterPrivate)
            return m_pTestFilterPrivate->testRange().GetRangeList();
        else
            return "";
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilter::filterType CGexTestFilter::type() const
    //
    // Description	:   Returns the type of the test filter
    //
    ///////////////////////////////////////////////////////////////////////////////////
    TestFilter::filterType TestFilter::GetType() const
    {
        if (m_pTestFilterPrivate)
            return m_pTestFilterPrivate->type();
        else
            return filterUndefined;
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	bool isFiltered(int nTestNumber) const
    //
    // Description	:
    //
    ///////////////////////////////////////////////////////////////////////////////////
    bool TestFilter::isFiltered(int nTestNumber) const
    {
        if (m_pTestFilterPrivate)
            return m_pTestFilterPrivate->contains(nTestNumber);

        return true;
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	bool isActivated() const
    //
    // Description	:
    //
    ///////////////////////////////////////////////////////////////////////////////////
    bool TestFilter::isActivated() const
    {
        return m_pTestFilterPrivate != NULL;
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	void addFilter(const QString& strTestRange, filterType eType)
    //
    // Description	:
    //
    ///////////////////////////////////////////////////////////////////////////////////
    void TestFilter::addFilter(const QString& strTestRange, filterType eType)
    {
        if (m_pTestFilterPrivate)
        {
            delete m_pTestFilterPrivate;
            m_pTestFilterPrivate = NULL;
        }

        m_pTestFilterPrivate = TestFilterPrivate::create(strTestRange, eType);
    }

    } // end namespace Gex
} // end namespace GS
