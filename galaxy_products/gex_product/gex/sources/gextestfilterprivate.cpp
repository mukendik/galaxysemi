#include "gextestfilterprivate.h"
#include "ctest.h"

namespace GS
{
    namespace Gex
    {
    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilterPrivate
    //
    // Description	:	Class holding the rule to filter a test list
    //
    ///////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////
    TestFilterPrivate::TestFilterPrivate(const QString& strTestRange, TestFilter::filterType eType)
        : m_testRange(strTestRange.toLatin1().constData()),
          m_eType(eType)
    {
    }

    ///////////////////////////////////////////////////////////
    // Destructor
    ///////////////////////////////////////////////////////////
    TestFilterPrivate::~TestFilterPrivate()
    {
    }

    ///////////////////////////////////////////////////////////
    // Methods
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilterPrivate * create(const QString& strTestRange, TestFilter::filterType eFilter)
    //
    // Description	:
    //
    ///////////////////////////////////////////////////////////////////////////////////
    TestFilterPrivate * TestFilterPrivate::create(const QString& strTestRange,
                                                  TestFilter::filterType eFilter)
    {
        TestFilterPrivate * pFilter = NULL;

        switch (eFilter)
        {
            case TestFilter::filterIgnore	:	pFilter = new TestFilterIgnorePrivate(strTestRange);
                                                break;

            case TestFilter::filterSelect	:	pFilter = new TestFilterSelectPrivate(strTestRange);
                                                break;

            default								:	break;
        }

        return pFilter;
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilterIgnorePrivate
    //
    // Description	:	Class holding the rule to filter a test list
    //
    ///////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////
    TestFilterIgnorePrivate::TestFilterIgnorePrivate(const QString& strTestRange)
        : TestFilterPrivate(strTestRange, TestFilter::filterIgnore)
    {
    }

    ///////////////////////////////////////////////////////////
    // Destructor
    ///////////////////////////////////////////////////////////
    TestFilterIgnorePrivate::~TestFilterIgnorePrivate()
    {
    }

    ///////////////////////////////////////////////////////////
    // Methods
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	bool contains(int nTestNumber) const
    //
    // Description	:	check if test list contains test number
    //
    ///////////////////////////////////////////////////////////////////////////////////
    bool TestFilterIgnorePrivate::contains(int nTestNumber) const
    {
        return (m_testRange.IsTestInList(nTestNumber, GEX_PTEST) == false);
    }

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	TestFilterSelectPrivate
    //
    // Description	:	Class holding the rule to filter a test list
    //
    ///////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////
    TestFilterSelectPrivate::TestFilterSelectPrivate(const QString& strTestRange)
        : TestFilterPrivate(strTestRange, TestFilter::filterSelect)
    {
    }

    //////////////////////////////////////////////////////////
    // Destructor
    ///////////////////////////////////////////////////////////
    TestFilterSelectPrivate::~TestFilterSelectPrivate()
    {
    }

    ///////////////////////////////////////////////////////////
    // Methods
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////
    //
    // Name			:	bool contains(int nTestNumber) const
    //
    // Description	:	check if test list contains test number
    //
    ///////////////////////////////////////////////////////////////////////////////////
    bool TestFilterSelectPrivate::contains(int nTestNumber) const
    {
        return m_testRange.IsTestInList(nTestNumber, GEX_PTEST);
    }

    } // end namespace Gex
} // end namespace GS
