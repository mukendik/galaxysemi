#ifndef GEX_IMPORT_CSV_H
#define GEX_IMPORT_CSV_H

#include <time.h>

#include <qmap.h>
#include <qdatetime.h>
#include <qstringlist.h>
#include <QTextStream>

#include "gex_constants.h"
#include "stdf.h"
#include "stdfrecords_v4.h"

// Predefined parameter fields.
#define	CSV_RAW_SBIN		0
#define	CSV_RAW_HBIN		1
#define	CSV_RAW_DIEX		2
#define	CSV_RAW_DIEY		3
#define	CSV_RAW_SITE		4
#define	CSV_RAW_TIME		5
#define	CSV_RAW_TOTAL_TESTS	6
#define	CSV_RAW_LOT_ID		7
#define	CSV_RAW_WAFER_ID	8

struct CBinCell
{
public:
    CBinCell() {strBinName="";}
    long	lBinCount;
    long	lBinIndex;
    QString	strBinName;
};

typedef QMap<int, struct CBinCell*> CSoftBinMap;
typedef QMap<int, struct CBinCell*> CHardBinMap;

class	GexDatabaseEntry;
class	CReportOptions;

class CGCsvParameter
{
public:
    QString			strName;	// Parameter name. E.g: "Idd_Total_Shutdown"
    QString			strUnits;	// Parameter units,E.g: "A"
    QString			strPatternName;	// Pattern name
    unsigned long	lTestNumber;// Test#
    long			lPinmapIndex;// Test pinmap index
    float			fLowLimit;	// Parameter Low Spec limit, E.g: 0.00004
    float			fHighLimit;	// Parameter High Spec limit, E.g: -0.00004
    bool			bValidLowLimit;		// Low limit defined
    bool			bValidHighLimit;	// High limit defined
    float			fValue;		// Parameter result
    bool			bStaticHeaderWritten;	// 'true' after first STDF PTR static header data written.
    long			lScale;
};

class CGCSVtoSTDF
{
public:
    CGCSVtoSTDF();
    ~CGCSVtoSTDF();

    // Convert 'FileName' CSV file, to STDF 'strFileNameSTDF' file
    // the expiration date is here just to check if it is still allowed to convert. Wont change the date.
    bool	Convert(const char *CsvFileName, const char *strFileNameSTDF,
                    bool bAllowExtendedCsv=false,bool bMonitoring=false,bool bAllowWizard=false);
    bool	SplitLots(QString CsvFileName,QStringList &strSplitFiles);
    QString GetLastError();

protected:

    // update cached options
    bool UpdateOptions(CReportOptions*);

private:

    enum MergeDuplicateTestRule { MERGE_TEST_NUMBER, MERGE_TEST_NAME, NEVER_MERGE_TEST } m_eTestMergeRule;	// for Option("dataprocessing", "duplicate_test"

    void clear(void);

    void LoadParameterIndexTable(void);
    void DumpParameterIndexTable(void);
    void UpdateParameterIndexTable(QString strParamName);
    bool ReadCsvFile(const char *CsvFileName, const char *strFileNameSTDF, bool bAllowExtendedCsv);
    bool WriteStdfFile(QTextStream *hCsvFile,const char *strFileNameSTDF);
    bool WriteSdrRecords(GS::StdLib::Stdf & csRefStdfFile);
    int	 ResultDisplayScaleFactor(unsigned uIndex);

    QString normalizeTestUnits(const QString& strTestUnits, long& dScaleFactor) const;
    double	normalizeTestResult(double dValue, long dScaleFactor) const;

    QString ReadLine(QTextStream& hFile, bool aLetEmptyValues = false);
    bool EmptyLine(const QString& line);

    //////////////////////////////////////////////////////////////////////
    // For ProgressBar
    int	iProgressStep;
    int	iNextFilePos;
    int	iFileSize;
    long	m_lStartParsingOffset;

    QString strLastError;	// Holds last error string during CSV->STDF convertion
    int	iLastError;			// Holds last error ID
    enum  errCodes
    {
        errNoError,			// No erro (default)
        errOpenFail,		// Failed Opening CSV file
        errInvalidFormatParameter,	// Invalid CSV format: didn't find the 'Parameter' section
        errInvalidFormatLowInRows,	// Invalid CSV format: Didn't find parameter rows
        errInvalidFormatMissingUnit,// Invalid CSV format: 'Unit' line missing
        errInvalidFormatMissingUSL,	// Invalid CSV format: 'USL' line missing
        errInvalidFormatMissingLSL,	// Invalid CSV format: 'LSL' line missing
        errLicenceExpired,	// File date out of Licence window!
        errWriteSTDF		// Failed creating STDF intermediate file
    };

    int 	nUnitsMode;					// Defines if csv file has normalized units
    bool	bNewCsvParameterFound;		// set to true if CSV file has a Parameter name not in our reference table=> makes it to be updated
    bool	bEditedDataFile;			// true if CSV format generated by Examinator
    CGCsvParameter *pCGCsvParameter;	// List of Parameters tables.
    unsigned uTotalParameters;			// Holds the total number of parameters / tests in each part tested
    QStringList pFullCsvParametersList;	// Complete list of ALL CSV parameters known.
    CSoftBinMap	SoftBinMap;
    CHardBinMap HardBinMap;

    time_t	lStartTime;					// Dataset creation time
    time_t	lSetupTime;					// Dataset start time
    time_t	lFinishTime;				// Dataset finish time
    int		iBurninTime;				// Burn-In Time
    QString	strLotID;					// LotID string
    QString	strProductID;				// Product / Device name
    QString	strTesterName;				// Tester name string
    QString	strTesterType;				// Tester type.
    QString strProgramName;				// Job name
    QString strProgramRev;				// Job rev
    QString strOperator;				// operator
    QString mSpecVer;                   // Spec_ver
    QString mFlowId;                    // flow_id
    QString mSetupId;                   // setup_id
    QString mDsgnRev;                   // dsgn_rev
    QString mEngId;                     // eng_id
    QString mSerlNum;                   // serl_num
    QString mSuprNam;                   // supr_nam
    QString strExecType;				// exec-type
    QString strExecRev;					// exe-ver
    QString strTestCode;				// test-cod
    BYTE    byRtstCode;                 // retest code (MIR.RTST_COD)
    QString strFacilityID;				// Facility-ID
    QString strFloorID;					// FloorID
    QString strProcessID;				// ProcessID
    QString	strSubLotID;				// SubLotID
    QString	strWaferID;					// WaferID
    QString strTemperature;				// Temperature testing.
    QString	strPackageType;				// PAckage type.
    QString	strFamilyID;				// FamilyID
    QString strFrequencyStep;			// Frequency / Step
    QStringList	strlPassSBins;			// List of PASS Soft bins
    QStringList	strlPassHBins;			// List of PASS Hard bins

    QList< GQTL_STDF::Stdf_SDR_V4 >   m_qlCssv4SdrList;       // list of sdr records to import

    // Wafer details
    float	m_lfWaferDiameter;			// Wafer diameter in Wafer Units
    float	m_lfWaferDieWidth;			// Die X size
    float	m_lfWaferDieHeight;			// Die Y size
    int		m_cWaferUnits;				// Units for Wafer diameter, Die width and Die height
    char	m_cWaferFlat;				// Flat orientation: U, D, R or L
    int		m_iWaferCenterDieX;			// X coordinate of center die on wafer
    int		m_iWaferCenterDieY;			// Y coordinate of center die on wafer
    char	m_cWaferPosX;				// Positive direction for X axis
    char	m_cWaferPosY;				// Positive direction for Y axis
};


#endif
