#include "pat_gdbn_abstract_baddies.h"
#include "pat_gdbn_generic_baddies.h"
#include "gqtl_utils.h"

///////////////////////////////////////////////////////////////////////////////////
// Class PatGdbnAbstractAlgorithm - Abstrast class to implement a gdbn algorithm
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////
PatGdbnGenericBadDies::PatGdbnGenericBadDies(
        GS::QtLib::Range * pBadBinList) : PatGdbnAbstractBadDies()
{
    m_pBadBinList = NULL;

    if (pBadBinList)
        m_pBadBinList = new GS::QtLib::Range(*pBadBinList);
}

///////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////
PatGdbnGenericBadDies::~PatGdbnGenericBadDies()
{
    if (m_pBadBinList)
    {
        delete m_pBadBinList;
        m_pBadBinList = NULL;
    }
}

///////////////////////////////////////////////////////////
// Methods
///////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//
// Name			:	bool PatGdbnGenericBadDies::isDieIncluded(int bin, int dieIndex) const
//
// Description	:	Indicate if a die should be taken into account in the gdbn computation
//
///////////////////////////////////////////////////////////////////////////////////
bool PatGdbnGenericBadDies::isDieIncluded(int bin, int /*dieIndex*/) const
{
    if (m_pBadBinList)
        return m_pBadBinList->Contains(bin);
    else
        return false;
}
