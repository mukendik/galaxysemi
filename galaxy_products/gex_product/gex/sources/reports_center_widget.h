#ifndef REPORTS_CENTER_WIDGET_H
#define REPORTS_CENTER_WIDGET_H

#include <QComboBox>
#include <QStringList>
#include <QtWidgets/QWidget>
#include <QList>
#include <QMap>
#include <QVariant>
#include <QModelIndex>
#include <QThread>
#include <QTreeView>
#include <QLibrary>
#include <QMessageBox>

#include "reports_center_thread.h"
#include "reports_center_item.h"
#include "reports_center_tree_model.h"
#include "reports_center_params_widget.h"

#define REPORTS_FOLDER "GalaxyReports"
#define TEMPLATES_FOLDER "GalaxySemi"
#define SELECT_GROUPBY_INVIT "--Select Group by--"
#define SELECT_FIELD_INVIT "--Select a field--"
#define SELECT_SERIE_INVIT "--Select Serie--"
#define SELECT_FILTER_INVIT "--Select Filter--"

namespace Ui
{
    class ReportsCenterWidget;
}

class ReportsCenterWidget : public QWidget
{
    Q_OBJECT

public:
    ReportsCenterWidget(class GexMainwindow* gmw, QWidget *parent = 0);
    ~ReportsCenterWidget();
    // Simply call QWidget::Show
    void ShowPage(void);
    // The jasper lib. Can be null !
    static QLibrary* pclJasperLibrary; //
    //  The tree model.
    static ReportsCenterTreeModel *s_model;
    // Jasper Cache Map : one widget per report, which contains all IC for the key report
    // key is report uri, widget is the widget containing all IC
    static QMap<QString, QWidget*> s_JasperReportsParamsWidgets;
    // GalaxyReport Cache Map : one dialog/widget per report
    //static QMap<QString, ReportsCenterParamsDialog*> s_ReportsCenterParamsDialogs;
    static QMap<QString, class CReportsCenterParamsWidget*> s_ReportsCenterParamsWidgets;
    // get the instance generated by the m_pGexMainWindow
    static ReportsCenterWidget* GetInstance();

    // scan usual folders (galaxy_reports,...)
    QString ScanUsualFolders();

    // Load a GRXML and put it in the parentItem
    bool LoadGRXML(QString filepath, ReportsCenterItem *parentitem);
    // Load GRXML version 0.5 and upper
    bool LoadGRXML_v1(QString filepath, ReportsCenterItem *parentitem);
    // Get current selected output format in combo box.
    QString		GetCurrentOutputFormat();
    // Get the DB combobox
    QComboBox*	GetDatabaseComboBox();
    // could return null !!!
    class GexDatabaseEntry* GetCurrentDatabaseEntry();

    // insert all available RDB fields in the given combobox
    bool InsertFieldsIntoComboBox(QComboBox *cb,
                                const QString &testingstage, // "Wafer Sort",...
                                QString BinType="N", 	// BinType can be H, S or N (or even *)
                                QString Custom="*",	// Custom can be Y, N or *
                                QString TimeType="*",  // TimeType can be Y, N or *
                                QString ConsolidatedType="Y"
                                  );
    // clean me / rename me : copy combobox ?
    void ReplaceOutputCombobox();
    // Hide all params widget
    void HideAllParamsWidget() { if (s_pCurrentParamsWidget!=NULL) s_pCurrentParamsWidget->hide(); }
    // add a small icon shortcut in the top button tollbar
    // HTH - Case 6889: Remove Reports Center button from the toolbar
//    bool AddIconInToolbar();
    // Show the latest params window
    static bool ShowLatestParamsWindow();
    // the current selected GalaxyReport paramswidget. Could be null !!!!
    static QWidget* s_pCurrentParamsWidget; //static ReportsCenterParamsDialog* m_pCurrentParamsWidget;

protected:
    void changeEvent(QEvent *e);

private:
    CReportsCenterThread* m_rc_thread;

    // scan folder recursively and add one entry/ParamsDialog per valid grxml.
    // returns "error ..." or "ok"
    QString ScanFolder(QString f, ReportsCenterItem *Item, bool recursive=true);
    //
    static class GexMainwindow* s_pGexMainWindow;
    //
    class GexDatabaseEntry	*m_pCurrentDatabaseEntry;
    Ui::ReportsCenterWidget *m_ui;
    QAction* m_actionRC;	// action when clicking the button ReportCenter in toolbar
    QAction* actionDBAdmin;		// action when clicking the DB admin in toolbar. To Do : Move me to main Window
public slots:
    //! \brief Delete all existing RC widgets
    bool DeleteAllParamsWidgets();
    // each time the user click somewhere in the tree
    void TreeViewClicked(const QModelIndex & index);
    // when mouse enter an item
    void TreeViewEntered(const QModelIndex & index);
    //
    void	UpdateGUI();
    // launched when a thread emits the signal "SetStatusLabel"
    void	SetStatusLabel(QString s);
    // activated when a thread emits the signal "ReportGenerated"
    void	ReportGenerated(const QString report_uri, const QString output);
    // launched when a thread emits the signal "PopMessageBox"
    void	PopMessageBox(const QString s, int severity=QMessageBox::Information);
    // when database change, delete all ParamsDialog, rescan the templates folder and regenerate all the ParamsDialog
    void	OnDatabaseComboBoxChanged(QString);
    // when output format changed, update the report options
    void	OnOutputFormatChanged(int);
    // On expanded a folder
    void OnExpanded(QModelIndex mi);

};

#endif // REPORTS_CENTER_WIDGET_H
