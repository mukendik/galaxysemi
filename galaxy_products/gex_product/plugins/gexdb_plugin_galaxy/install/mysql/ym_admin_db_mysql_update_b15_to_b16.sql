-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------



-- ---------------------------------------------------------
-- Caution messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: when running manually that script make sure to uncomment the line below to specify a working database
-- use database_name_xx;
CAUTION: when running manually that script make sure to comment each lines: "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) to be sure to catch all errors
CAUTION: when running manually that script make sure to source the script common_update_initialize.sql before and common_update_finalize.sql after



-- ---------------------------------------------------------
-- Add Primary Keys on ID and Field for all options tables
-- to avoid DUPLICATED Fields
-- ---------------------------------------------------------
CALL drop_column_if_exists(Database(), 'ym_databases_options', 'option_id', @status, @message);
CALL drop_column_if_exists(Database(), 'ym_nodes_options', 'option_id', @status, @message);
CALL drop_column_if_exists(Database(), 'ym_users_options', 'option_id', @status, @message);
CALL drop_column_if_exists(Database(), 'ym_tasks_options', 'option_id', @status, @message);

-- ---------------------------------------------------------
-- UPDATE DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_b15_to_b16_data;
DELIMITER $$
CREATE PROCEDURE update_b15_to_b16_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE original_COUNT INT;
    DECLARE temporary_COUNT INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;

    -- Remove duplicated options
    -- Create temporary table
    DROP TABLE IF EXISTS ym_tasks_options_temp;
    SET SESSION group_concat_max_len = 1024*1024*1024;
    CREATE TEMPORARY TABLE ym_tasks_options_temp AS 
        SELECT task_id, field, group_concat(DISTINCT value SEPARATOR ';') AS value FROM ym_tasks_options GROUP BY task_id,field;

    SELECT count(*) FROM ym_tasks_options INTO original_COUNT;
    SELECT count(*) FROM ym_tasks_options_temp INTO temporary_COUNT;

    IF (original_COUNT > temporary_COUNT) THEN
        -- Update ym_tasks_options
        TRUNCATE TABLE ym_tasks_options;
        INSERT into ym_tasks_options
            SELECT task_id,field,value FROM ym_tasks_options_temp;
    END IF;

    SET OUT_status=1;

	END $$
DELIMITER ;

-- ---------------------------------------------------------
-- UPDATE DATA
-- ---------------------------------------------------------
CALL update_b15_to_b16_data(@status, @message);
DROP PROCEDURE IF EXISTS update_b15_to_b16_data;

-- ---------------------------------------------------------
-- Add primary keys 
-- ---------------------------------------------------------
UPDATE ym_databases_options SET database_id=0 WHERE database_id IS NULL;
CALL add_primary_key_to(Database(), 'ym_databases_options', 'database_id,field', @status, @message);
UPDATE ym_nodes_options SET node_id=0 WHERE node_id IS NULL;
CALL add_primary_key_to(Database(), 'ym_nodes_options', 'node_id,field', @status, @message);
UPDATE ym_users_options SET user_id=0 WHERE user_id IS NULL;
CALL add_primary_key_to(Database(), 'ym_users_options', 'user_id,field', @status, @message);
UPDATE ym_tasks_options SET task_id=0 WHERE task_id IS NULL;
CALL add_primary_key_to(Database(), 'ym_tasks_options', 'task_id,field', @status, @message);


-- ---------------------------------------------------------
-- Update DB version
-- ---------------------------------------------------------
UPDATE ym_settings SET value='4.0' WHERE field='DB_VERSION_NB';
UPDATE ym_settings SET value='16' WHERE field='DB_BUILD_NB';
