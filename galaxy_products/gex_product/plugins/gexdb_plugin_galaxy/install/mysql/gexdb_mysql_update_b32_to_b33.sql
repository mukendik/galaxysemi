-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(32, @status, @message);
CALL start_update('GEXDB V4.03 B33 (MySQL)', 403, 33, @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_PROCEDURES', @status, @message);

-- ---------------------------------------------------------
-- ADD COLUMNS FOR PRIMARY KEYS
-- ---------------------------------------------------------
CALL add_column_if_not_exists(Database(), 'wt_wafer_info', 'product_name', 'varchar(255) NOT NULL AFTER wafer_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_info', 'product_name', 'varchar(255) NOT NULL AFTER wafer_id', @status, @message);


-- ---------------------------------------------------------
-- UPDATE field tpin_pmrindex change size
-- ---------------------------------------------------------
CALL change_column(Database(), 'wt_wafer_info', 'lot_id', 'varchar(255) NOT NULL', @status, @message);
CALL change_column(Database(), 'wt_wafer_info', 'wafer_id', 'varchar(255) NOT NULL', @status, @message);
CALL change_column(Database(), 'et_wafer_info', 'lot_id', 'varchar(255) NOT NULL', @status, @message);
CALL change_column(Database(), 'et_wafer_info', 'wafer_id', 'varchar(255) NOT NULL', @status, @message);

-- ---------------------------------------------------------
-- ADD PRIMARY KEYS
-- ---------------------------------------------------------
CALL add_primary_key_to(Database(), 'wt_wafer_info', 'lot_id,wafer_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'et_wafer_info', 'lot_id,wafer_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'ft_lot', 'lot_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'et_lot', 'lot_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'wt_lot', 'lot_id,tracking_lot_id,product_name', @status, @message);


-- ---------------------------------------------------------
-- CHECK UPDATE DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_b32_to_b33_data;
DELIMITER $$
CREATE PROCEDURE update_b32_to_b33_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;
	
-- Update xt_wafer_info.product_name
	UPDATE wt_wafer_info W set product_name= (select product_name from wt_lot L where L.lot_id=W.lot_id);
	UPDATE et_wafer_info W set product_name= (select product_name from et_lot L where L.lot_id=W.lot_id);

    SET OUT_status=1;

	END $$
DELIMITER ;

-- ---------------------------------------------------------
-- UPDATE DATA
-- ---------------------------------------------------------
CALL update_b32_to_b33_data(@status, @message);
DROP PROCEDURE IF EXISTS update_b32_to_b33_data;

-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);


