-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(30, @status, @message);
CALL start_update('GEXDB V4.01 B31 (MySQL)', 401, 31, @status, @message);

-- ---------------------------------------------------------
-- xx_insertion_preprocessing and xx_check_data_integrity stored procedures
-- Create these stored procedures if they not already exist
-- ---------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ et_insertion_preprocessing(
IN Splitlot INT, -- SplitlotId of the splitlot to be pre-processed
OUT Message VARCHAR(1024), -- Return the Error message in case the pre-processing fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

-- The call to the following stored procedure should be last in this stored procedure.
-- Any customisation should be done above.
CALL et_check_data_integrity(Splitlot, Message, Status);

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ et_check_data_integrity(
IN Splitlot INT, -- SplitlotId of the splitlot to be checked
OUT Message VARCHAR(1024), -- Return the Error message in case the check fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

-- !!!! DO NOT MODIFY THIS STORED PROCEDURE !!!!
-- !!!! IT CAN POTENTIALLY BE DROPPED/MODIFIED BY TDR UPDATE SCRIPTS !!!!
-- !!!! ANY MODIFICATION COULD BE LOST DURING FUTURE TDR UPDATES !!!!

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ ft_insertion_preprocessing(
IN Splitlot INT, -- SplitlotId of the splitlot to be pre-processed
OUT Message VARCHAR(1024), -- Return the Error message in case the pre-processing fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

-- The call to the following stored procedure should be last in this stored procedure.
-- Any customisation should be done above.
CALL ft_check_data_integrity(Splitlot, Message, Status);

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ ft_check_data_integrity(
IN Splitlot INT, -- SplitlotId of the splitlot to be checked
OUT Message VARCHAR(1024), -- Return the Error message in case the check fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

-- !!!! DO NOT MODIFY THIS STORED PROCEDURE !!!!
-- !!!! IT CAN POTENTIALLY BE DROPPED/MODIFIED BY TDR UPDATE SCRIPTS !!!!
-- !!!! ANY MODIFICATION COULD BE LOST DURING FUTURE TDR UPDATES !!!!

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ wt_insertion_preprocessing(
IN Splitlot INT, -- SplitlotId of the splitlot to be pre-processed
OUT Message VARCHAR(1024), -- Return the Error message in case the pre-processing fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

-- The call to the following stored procedure should be last in this stored procedure.
-- Any customisation should be done above.
CALL wt_check_data_integrity(Splitlot, Message, Status);

END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE /*IF NOT EXISTS*/ wt_check_data_integrity(
IN Splitlot INT, -- SplitlotId of the splitlot to be checked
OUT Message VARCHAR(1024), -- Return the Error message in case the check fails
OUT Status INT -- Status for the insertion (0=FAIL , 1=PASS, 2=DELAY)
)
BEGIN

-- !!!! DO NOT MODIFY THIS STORED PROCEDURE !!!!
-- !!!! IT CAN POTENTIALLY BE DROPPED/MODIFIED BY TDR UPDATE SCRIPTS !!!!
-- !!!! ANY MODIFICATION COULD BE LOST DURING FUTURE TDR UPDATES !!!!

SELECT 'Success' INTO Message From dual;
SELECT 1 INTO Status FROM dual;

END $$
DELIMITER ;


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
