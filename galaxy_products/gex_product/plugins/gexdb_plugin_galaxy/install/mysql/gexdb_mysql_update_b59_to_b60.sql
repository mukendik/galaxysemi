-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS:
-- o To customize the update
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(59, @status, @message);
CALL start_update('GEXDB V5.13 B60 (MySQL)', 513, 60, @status, @message);


-- -----------------------------------------------------
-- Table `et_spm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm` ;

CREATE TABLE `et_spm` (
  `spm_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Unique identifier of the spm task',
  `product_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to resolve at runtime the product list on which the spm task must be executed',
  `test_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to generate at config time the test list on which the spm task must be executed',
  `stats_to_monitor` VARCHAR(255) NOT NULL COMMENT 'list of statistics to be monitored separated by a pipe (ie: mean|sigma)',
  `min_lots` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of lots necessary to compute the spm limits',
  `min_datapoints` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of datapoints used to compute the spm limits',
  `default_algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used by default for calculating the spm limits',
  `validity_period` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'number of days before the created spm is invalid',
  `days_before_expiration` SMALLINT(5) NOT NULL COMMENT 'number of days before the end of the validity period where warning emails and/or recompute will be triggered',
  `send_email_before_expiration` TINYINT(1) NOT NULL COMMENT 'whether an email must be sent when the limit before expiration triggers',
  `auto_recompute` TINYINT(1) NOT NULL COMMENT 'whether the limits must be automatically recomputed when the limit before expiration triggers',
  `auto_recompute_period` SMALLINT(5) NOT NULL COMMENT 'number of days that must be used to automatically recompute the limits',
  `email_format` VARCHAR(45) NULL COMMENT 'format of the alert email',
  `email_from` VARCHAR(255) NULL COMMENT '"from" value of the alert email',
  `email_report_type` VARCHAR(45) NULL COMMENT 'report type of the alert email',
  `emails` VARCHAR(1024) NULL COMMENT 'recipients of the alert email',
  PRIMARY KEY (`spm_id`))
ENGINE = InnoDB COMMENT='describes a spm task';


-- -----------------------------------------------------
-- Table `et_spm_version`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_version` ;

CREATE TABLE `et_spm_version` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm owning this version',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'spm version unique identifier',
  `draft_version` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Flags whether this version is a draft in progress or a production version usable for spm run',
  `version_label` VARCHAR(255) NULL COMMENT 'user defined label for this version',
  `matched_products` VARCHAR(1024) NOT NULL COMMENT 'comma separated list of products used to compute the limits on that spm version',
  `site_merge_mode` VARCHAR(45) NOT NULL COMMENT 'per_site (split), merged_sites (merged) or both (both) processing mode of the test sites',
  `creation_date` DATETIME NOT NULL COMMENT 'spm version creation date',
  `start_date` DATETIME NOT NULL COMMENT 'date from which the spm version can be run',
  `expiration_date` DATETIME NOT NULL COMMENT 'date until which the spm version can be run',
  `expiration_warning_date` DATETIME NULL COMMENT 'date at which an expiration email must be sent',
  `expiration_warning_done` TINYINT(1) NULL COMMENT '0 = no warning have been sent yet, 1 = a warning has been sent, 2 = a 24h warning has been sent',
  `computation_fromdate` DATETIME NOT NULL COMMENT 'start of the time range used to compute the version limits',
  `computation_todate` DATETIME NOT NULL COMMENT 'end of the time range used to compute the version limits',
  PRIMARY KEY (`spm_id`, `spm_version_id`)/*,
  CONSTRAINT `fk_et_spm_version_et_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `et_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='version of a spm task implementing the limits to check on a given test perimeter';


-- -----------------------------------------------------
-- Table `et_spm_test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_test` ;

CREATE TABLE `et_spm_test` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier to which this spm test is attached',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'spm test identifier',
  `test_type` VARCHAR(1) NOT NULL COMMENT 'P (parametric) or M (multiparametric) test type',
  `test_num` INT(10) UNSIGNED NOT NULL COMMENT 'test number',
  `test_name` VARCHAR(255) NOT NULL COMMENT 'test name',
  `test_unit` VARCHAR(255) NULL COMMENT 'test unit',   
  `test_scale` TINYINT(3) NULL COMMENT 'test scale for display',   
  UNIQUE INDEX `UNIQUE` (`spm_id` ASC, `test_type` ASC, `test_num` ASC, `test_name` ASC),
  PRIMARY KEY (`spm_id`,`test_id`)/*,
  CONSTRAINT `fk_et_spm_et_spm_test`
    FOREIGN KEY (`spm_id`)
    REFERENCES `et_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='identification of a test -using its type, number and name- under spm watch';


-- -----------------------------------------------------
-- Table `et_spm_stat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_stat` ;

CREATE TABLE `et_spm_stat` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique spm stat identifier',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `has_unit` TINYINT(1) NOT NULL COMMENT 'whether the value has a unit (same as the test)',
  `ll_enabled` TINYINT(1) NOT NULL COMMENT 'whether the low limit is enabled',
  `ll` DOUBLE COMMENT 'low limit value, NULL if not computed',
  `hl_enabled` TINYINT(1) NOT NULL COMMENT 'whether the high limit is enabled',
  `hl` DOUBLE COMMENT 'high limit value, NULL if not computed',
  `algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used to compute that stat limits',
  `computation_datapoints` INTEGER(10) UNSIGNED COMMENT 'number of datapoints used during the limits iterative computation process, NULL if not computed',
  `computation_outliers` INTEGER(10) UNSIGNED COMMENT 'number of outliers put aside during the limits iterative computation process, NULL if not computed',
  `enabled` TINYINT(1) NOT NULL COMMENT 'whether the stat is enabled',
  `recompute` TINYINT(1) NOT NULL COMMENT 'whether the stat need to be recomputed after an algo/N update',
  PRIMARY KEY (`spm_id`, `spm_version_id`, `spm_stat_id`),
  UNIQUE INDEX `unique_composite` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC, `test_id` ASC, `site_no` ASC, `criticity_level` ASC, `stat_name` ASC),
  INDEX `fk_et_spm_stat_et_spm_test1_idx` (`test_id` ASC, `spm_id` ASC)/*,
  CONSTRAINT `fk_et_spm_stat_et_spm_version1`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `et_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_et_spm_stat_et_spm_test1`
    FOREIGN KEY (`spm_id` , `test_id`)
    REFERENCES `et_spm_test` (`spm_id` , `test_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='represents a single stat to be watched by the spm task, for a given test, using a given site number, at a given criticity level';


-- -----------------------------------------------------
-- Table `et_spm_stat_param`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_stat_param` ;

CREATE TABLE `et_spm_stat_param` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm stat identifier for which the parameter is used to compute the limits',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_et_spm_stat_param_et_spm_parameter1_idx` (`spm_stat_id` ASC, `spm_id` ASC, `spm_version_id` ASC)/*,
  CONSTRAINT `fk_et_spm_stat_param_et_spm_stat1`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `et_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='parameter used when computing a stat limits';


-- -----------------------------------------------------
-- Table `et_spm_default_params`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_default_params` ;

CREATE TABLE `et_spm_default_params` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'criticity level to which this default parameter is applied',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_et_spm_default_params_et_spm1_idx` (`spm_id` ASC)/*,
  CONSTRAINT `fk_et_spm_default_params_et_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `et_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='default parameter to use when computing the stat limits of a new spm version';


-- -----------------------------------------------------
-- Table `et_spm_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_log` ;

CREATE TABLE `et_spm_log` (
  `log_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `execution_type` VARCHAR(1) NOT NULL COMMENT 'M (manual), I (insertion) or T (trigger) spm activation',
  `matched_products` VARCHAR(1024) COMMENT 'list of the products on which that particular spm execution resolved',
  `matched_lots` VARCHAR(1024) COMMENT 'list of the lots on which that particular spm execution resolved',
  `matched_sublots` VARCHAR(1024) COMMENT 'list of the sublots/wafers on which that particular spm execution resolved',
  `nb_parts` INT(10) UNSIGNED COMMENT 'number of parts tested according to the resolved products/lots/sublots',
  `nb_splitlot_alarm` INT(10) UNSIGNED COMMENT 'how many splitlot level alarms this spm run raised',
  `status` VARCHAR(45) COMMENT 'status of the execution ie PASS, FAIL, IN PROGRESS...',
  `summary` TEXT COMMENT 'summary of the execution',
  PRIMARY KEY (`log_id`),
  INDEX `fk_et_spm_log_et_spm_stat_idx` (`spm_id`, `spm_version_id`, `execution_date`)/*,
  CONSTRAINT `fk_et_spm_logs_et_spm_version`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `et_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='logging of a single spm execution';

-- -----------------------------------------------------
-- Table `et_spm_alarm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_alarm` ;

CREATE TABLE `et_spm_alarm` (
  `log_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the log identifier',
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) NOT NULL COMMENT 'foreign key to the spm stat identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `splitlot_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the first splitlot identifier used to compute the datapoint',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `exec_count` MEDIUMINT(8) unsigned NOT NULL DEFAULT '0',
  `fail_count` MEDIUMINT(8) unsigned DEFAULT NULL,
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `stat_ll` DOUBLE COMMENT 'low limit value, NULL if no limit',
  `stat_hl` DOUBLE COMMENT 'high limit value, NULL if no limit',
  `outlier_value` DOUBLE NOT NULL COMMENT 'value of the detected outlier',
  PRIMARY KEY (`log_id`, `execution_date`, `spm_stat_id`,`splitlot_id`),
  INDEX `fk_et_spm_alarm_et_spm_stat_idx` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC)/*,
  CONSTRAINT `fk_et_spm_alarm_et_spm_stat`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `et_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='alarms raised by spm executions';


-- -----------------------------------------------------
-- Table `wt_spm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm` ;

CREATE TABLE `wt_spm` (
  `spm_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Unique identifier of the spm task',
  `product_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to resolve at runtime the product list on which the spm task must be executed',
  `test_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to generate at config time the test list on which the spm task must be executed',
  `stats_to_monitor` VARCHAR(255) NOT NULL COMMENT 'list of statistics to be monitored separated by a pipe (ie: mean|sigma)',
  `min_lots` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of lots necessary to compute the spm limits',
  `min_datapoints` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of datapoints used to compute the spm limits',
  `default_algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used by default for calculating the spm limits',
  `validity_period` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'number of days before the created spm is invalid',
  `days_before_expiration` SMALLINT(5) NOT NULL COMMENT 'number of days before the end of the validity period where warning emails and/or recompute will be triggered',
  `send_email_before_expiration` TINYINT(1) NOT NULL COMMENT 'whether an email must be sent when the limit before expiration triggers',
  `auto_recompute` TINYINT(1) NOT NULL COMMENT 'whether the limits must be automatically recomputed when the limit before expiration triggers',
  `auto_recompute_period` SMALLINT(5) NOT NULL COMMENT 'number of days that must be used to automatically recompute the limits',
  `email_format` VARCHAR(45) NULL COMMENT 'format of the alert email',
  `email_from` VARCHAR(255) NULL COMMENT '"from" value of the alert email',
  `email_report_type` VARCHAR(45) NULL COMMENT 'report type of the alert email',
  `emails` VARCHAR(1024) NULL COMMENT 'recipients of the alert email',
  PRIMARY KEY (`spm_id`))
ENGINE = InnoDB COMMENT='describes a spm task';


-- -----------------------------------------------------
-- Table `wt_spm_version`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_version` ;

CREATE TABLE `wt_spm_version` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm owning this version',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'spm version unique identifier',
  `draft_version` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Flags whether this version is a draft in progress or a production version usable for spm run',
  `version_label` VARCHAR(255) NULL COMMENT 'user defined label for this version',
  `matched_products` VARCHAR(1024) NOT NULL COMMENT 'comma separated list of products used to compute the limits on that spm version',
  `site_merge_mode` VARCHAR(45) NOT NULL COMMENT 'per_site (split), merged_sites (merged) or both (both) processing mode of the test sites',
  `creation_date` DATETIME NOT NULL COMMENT 'spm version creation date',
  `start_date` DATETIME NOT NULL COMMENT 'date from which the spm version can be run',
  `expiration_date` DATETIME NOT NULL COMMENT 'date until which the spm version can be run',
  `expiration_warning_date` DATETIME NULL COMMENT 'date at which an expiration email must be sent',
  `expiration_warning_done` TINYINT(1) NULL COMMENT '0 = no warning have been sent yet, 1 = a warning has been sent, 2 = a 24h warning has been sent',
  `computation_fromdate` DATETIME NOT NULL COMMENT 'start of the time range used to compute the version limits',
  `computation_todate` DATETIME NOT NULL COMMENT 'end of the time range used to compute the version limits',
  PRIMARY KEY (`spm_id`, `spm_version_id`)/*,
  CONSTRAINT `fk_wt_spm_version_wt_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `wt_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='version of a spm task implementing the limits to check on a given test perimeter';


-- -----------------------------------------------------
-- Table `wt_spm_test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_test` ;

CREATE TABLE `wt_spm_test` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier to which this spm test is attached',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'spm test identifier',
  `test_type` VARCHAR(1) NOT NULL COMMENT 'P (parametric) or M (multiparametric) test type',
  `test_num` INT(10) UNSIGNED NOT NULL COMMENT 'test number',
  `test_name` VARCHAR(255) NOT NULL COMMENT 'test name',   
  `test_unit` VARCHAR(255) NULL COMMENT 'test unit',   
  `test_scale` TINYINT(3) NULL COMMENT 'test scale for display',
  UNIQUE INDEX `UNIQUE` (`spm_id` ASC, `test_type` ASC, `test_num` ASC, `test_name` ASC),
  PRIMARY KEY (`spm_id`,`test_id`)/*,
  CONSTRAINT `fk_wt_spm_wt_spm_test`
    FOREIGN KEY (`spm_id`)
    REFERENCES `wt_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='identification of a test -using its type, number and name- under spm watch';


-- -----------------------------------------------------
-- Table `wt_spm_stat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_stat` ;

CREATE TABLE `wt_spm_stat` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique spm stat identifier',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `has_unit` TINYINT(1) NOT NULL COMMENT 'whether the value has a unit (same as the test)',
  `ll_enabled` TINYINT(1) NOT NULL COMMENT 'whether the low limit is enabled',
  `ll` DOUBLE COMMENT 'low limit value, NULL if not computed',
  `hl_enabled` TINYINT(1) NOT NULL COMMENT 'whether the high limit is enabled',
  `hl` DOUBLE COMMENT 'high limit value, NULL if not computed',
  `algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used to compute that stat limits',
  `computation_datapoints` INTEGER(10) UNSIGNED COMMENT 'number of datapoints used during the limits iterative computation process, NULL if not computed',
  `computation_outliers` INTEGER(10) UNSIGNED COMMENT 'number of outliers put aside during the limits iterative computation process, NULL if not computed',
  `enabled` TINYINT(1) NOT NULL COMMENT 'whether the stat is enabled',
  `recompute` TINYINT(1) NOT NULL COMMENT 'whether the stat need to be recomputed after an algo/N update',
  PRIMARY KEY (`spm_id`, `spm_version_id`, `spm_stat_id`),
  UNIQUE INDEX `unique_composite` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC, `test_id` ASC, `site_no` ASC, `criticity_level` ASC, `stat_name` ASC),
  INDEX `fk_wt_spm_stat_wt_spm_test1_idx` (`test_id` ASC, `spm_id` ASC)/*,
  CONSTRAINT `fk_wt_spm_stat_wt_spm_version1`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `wt_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_wt_spm_stat_wt_spm_test1`
    FOREIGN KEY (`spm_id` , `test_id`)
    REFERENCES `wt_spm_test` (`spm_id` , `test_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='represents a single stat to be watched by the spm task, for a given test, using a given site number, at a given criticity level';


-- -----------------------------------------------------
-- Table `wt_spm_stat_param`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_stat_param` ;

CREATE TABLE `wt_spm_stat_param` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm stat identifier for which the parameter is used to compute the limits',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_wt_spm_stat_param_wt_spm_parameter1_idx` (`spm_stat_id` ASC, `spm_id` ASC, `spm_version_id` ASC)/*,
  CONSTRAINT `fk_wt_spm_stat_param_wt_spm_stat1`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `wt_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='parameter used when computing a stat limits';


-- -----------------------------------------------------
-- Table `wt_spm_default_params`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_default_params` ;

CREATE TABLE `wt_spm_default_params` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'criticity level to which this default parameter is applied',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_wt_spm_default_params_wt_spm1_idx` (`spm_id` ASC)/*,
  CONSTRAINT `fk_wt_spm_default_params_wt_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `wt_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='default parameter to use when computing the stat limits of a new spm version';


-- -----------------------------------------------------
-- Table `wt_spm_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_log` ;

CREATE TABLE `wt_spm_log` (
  `log_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `execution_type` VARCHAR(1) NOT NULL COMMENT 'M (manual), I (insertion) or T (trigger) spm activation',
  `matched_products` VARCHAR(1024) COMMENT 'list of the products on which that particular spm execution resolved',
  `matched_lots` VARCHAR(1024) COMMENT 'list of the lots on which that particular spm execution resolved',
  `matched_sublots` VARCHAR(1024) COMMENT 'list of the sublots/wafers on which that particular spm execution resolved',
  `nb_parts` INT(10) UNSIGNED COMMENT 'number of parts tested according to the resolved products/lots/sublots',
  `nb_splitlot_alarm` INT(10) UNSIGNED COMMENT 'how many splitlot level alarms this spm run raised',
  `status` VARCHAR(45) COMMENT 'status of the execution ie PASS, FAIL, IN PROGRESS...',
  `summary` TEXT COMMENT 'summary of the execution',
  PRIMARY KEY (`log_id`),
  INDEX `fk_wt_spm_log_wt_spm_stat_idx` (`spm_id`, `spm_version_id`, `execution_date`)/*,
  CONSTRAINT `fk_wt_spm_logs_wt_spm_version`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `wt_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='logging of a single spm execution';


-- -----------------------------------------------------
-- Table `wt_spm_alarm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_alarm` ;

CREATE TABLE `wt_spm_alarm` (
  `log_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the log identifier',
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) NOT NULL COMMENT 'foreign key to the spm stat identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `splitlot_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the first splitlot identifier used to compute the datapoint',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `exec_count` MEDIUMINT(8) unsigned NOT NULL DEFAULT '0',
  `fail_count` MEDIUMINT(8) unsigned DEFAULT NULL,
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `stat_ll` DOUBLE COMMENT 'low limit value, NULL if no limit',
  `stat_hl` DOUBLE COMMENT 'high limit value, NULL if no limit',
  `outlier_value` DOUBLE NOT NULL COMMENT 'value of the detected outlier',
  PRIMARY KEY (`log_id`, `execution_date`, `spm_stat_id`,`splitlot_id`),
  INDEX `fk_wt_spm_alarm_wt_spm_stat_idx` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC)/*,
  CONSTRAINT `fk_wt_spm_alarm_wt_spm_stat`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `wt_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='alarms raised by spm executions';


-- -----------------------------------------------------
-- Table `ft_spm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm` ;

CREATE TABLE `ft_spm` (
  `spm_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Unique identifier of the spm task',
  `product_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to resolve at runtime the product list on which the spm task must be executed',
  `test_regexp` VARCHAR(1024) NOT NULL COMMENT 'regular expression used to generate at config time the test list on which the spm task must be executed',
  `stats_to_monitor` VARCHAR(255) NOT NULL COMMENT 'list of statistics to be monitored separated by a pipe (ie: mean|sigma)',
  `min_lots` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of lots necessary to compute the spm limits',
  `min_datapoints` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'minimum number of datapoints used to compute the spm limits',
  `default_algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used by default for calculating the spm limits',
  `validity_period` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'number of days before the created spm is invalid',
  `days_before_expiration` SMALLINT(5) NOT NULL COMMENT 'number of days before the end of the validity period where warning emails and/or recompute will be triggered',
  `send_email_before_expiration` TINYINT(1) NOT NULL COMMENT 'whether an email must be sent when the limit before expiration triggers',
  `auto_recompute` TINYINT(1) NOT NULL COMMENT 'whether the limits must be automatically recomputed when the limit before expiration triggers',
  `auto_recompute_period` SMALLINT(5) NOT NULL COMMENT 'number of days that must be used to automatically recompute the limits',
  `email_format` VARCHAR(45) NULL COMMENT 'format of the alert email',
  `email_from` VARCHAR(255) NULL COMMENT '"from" value of the alert email',
  `email_report_type` VARCHAR(45) NULL COMMENT 'report type of the alert email',
  `emails` VARCHAR(1024) NULL COMMENT 'recipients of the alert email',
  PRIMARY KEY (`spm_id`))
ENGINE = InnoDB COMMENT='describes a spm task';


-- -----------------------------------------------------
-- Table `ft_spm_version`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_version` ;

CREATE TABLE `ft_spm_version` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm owning this version',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'spm version unique identifier',
  `draft_version` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'Flags whether this version is a draft in progress or a production version usable for spm run',
  `version_label` VARCHAR(255) NULL COMMENT 'user defined label for this version',
  `matched_products` VARCHAR(1024) NOT NULL COMMENT 'comma separated list of products used to compute the limits on that spm version',
  `site_merge_mode` VARCHAR(45) NOT NULL COMMENT 'per_site (split), merged_sites (merged) or both (both) processing mode of the test sites',
  `creation_date` DATETIME NOT NULL COMMENT 'spm version creation date',
  `start_date` DATETIME NOT NULL COMMENT 'date from which the spm version can be run',
  `expiration_date` DATETIME NOT NULL COMMENT 'date until which the spm version can be run',
  `expiration_warning_date` DATETIME NULL COMMENT 'date at which an expiration email must be sent',
  `expiration_warning_done` TINYINT(1) NULL COMMENT '0 = no warning have been sent yet, 1 = a warning has been sent, 2 = a 24h warning has been sent',
  `computation_fromdate` DATETIME NOT NULL COMMENT 'start of the time range used to compute the version limits',
  `computation_todate` DATETIME NOT NULL COMMENT 'end of the time range used to compute the version limits',
  PRIMARY KEY (`spm_id`, `spm_version_id`)/*,
  CONSTRAINT `fk_ft_spm_version_ft_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `ft_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='version of a spm task implementing the limits to check on a given test perimeter';


-- -----------------------------------------------------
-- Table `ft_spm_test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_test` ;

CREATE TABLE `ft_spm_test` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier to which this spm test is attached',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'spm test identifier',
  `test_type` VARCHAR(1) NOT NULL COMMENT 'P (parametric) or M (multiparametric) test type',
  `test_num` INT(10) UNSIGNED NOT NULL COMMENT 'test number',
  `test_name` VARCHAR(255) NOT NULL COMMENT 'test name',   
  `test_unit` VARCHAR(255) NULL COMMENT 'test unit',   
  `test_scale` TINYINT(3) NULL COMMENT 'test scale for display',
  UNIQUE INDEX `UNIQUE` (`spm_id` ASC, `test_type` ASC, `test_num` ASC, `test_name` ASC),
  PRIMARY KEY (`spm_id`,`test_id`)/*,
  CONSTRAINT `fk_ft_spm_ft_spm_test`
    FOREIGN KEY (`spm_id`)
    REFERENCES `ft_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='identification of a test -using its type, number and name- under spm watch';


-- -----------------------------------------------------
-- Table `ft_spm_stat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_stat` ;

CREATE TABLE `ft_spm_stat` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique spm stat identifier',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `has_unit` TINYINT(1) NOT NULL COMMENT 'whether the value has a unit (same as the test)',
  `ll_enabled` TINYINT(1) NOT NULL COMMENT 'whether the low limit is enabled',
  `ll` DOUBLE COMMENT 'low limit value, NULL if not computed',
  `hl_enabled` TINYINT(1) NOT NULL COMMENT 'whether the high limit is enabled',
  `hl` DOUBLE COMMENT 'high limit value, NULL if not computed',
  `algorithm` VARCHAR(45) NOT NULL COMMENT 'algorithm used to compute that stat limits',
  `computation_datapoints` INTEGER(10) UNSIGNED COMMENT 'number of datapoints used during the limits iterative computation process, NULL if not computed',
  `computation_outliers` INTEGER(10) UNSIGNED COMMENT 'number of outliers put aside during the limits iterative computation process, NULL if not computed',
  `enabled` TINYINT(1) NOT NULL COMMENT 'whether the stat is enabled',
  `recompute` TINYINT(1) NOT NULL COMMENT 'whether the stat need to be recomputed after an algo/N update',
  PRIMARY KEY (`spm_id`, `spm_version_id`, `spm_stat_id`),
  UNIQUE INDEX `unique_composite` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC, `test_id` ASC, `site_no` ASC, `criticity_level` ASC, `stat_name` ASC),
  INDEX `fk_ft_spm_stat_ft_spm_test1_idx` (`test_id` ASC, `spm_id` ASC)/*,
  CONSTRAINT `fk_ft_spm_stat_ft_spm_version1`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `ft_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ft_spm_stat_ft_spm_test1`
    FOREIGN KEY (`spm_id` , `test_id`)
    REFERENCES `ft_spm_test` (`spm_id` , `test_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='represents a single stat to be watched by the spm task, for a given test, using a given site number, at a given criticity level';


-- -----------------------------------------------------
-- Table `ft_spm_stat_param`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_stat_param` ;

CREATE TABLE `ft_spm_stat_param` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm stat identifier for which the parameter is used to compute the limits',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_ft_spm_stat_param_ft_spm_parameter1_idx` (`spm_stat_id` ASC, `spm_id` ASC, `spm_version_id` ASC)/*,
  CONSTRAINT `fk_ft_spm_stat_param_ft_spm_stat1`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `ft_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='parameter used when computing a stat limits';


-- -----------------------------------------------------
-- Table `ft_spm_default_params`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_default_params` ;

CREATE TABLE `ft_spm_default_params` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'criticity level to which this default parameter is applied',
  `param_name` VARCHAR(1) NOT NULL COMMENT 'name of the parameter (ex: N)',
  `param_value` FLOAT NOT NULL COMMENT 'value of the parameter',
  INDEX `fk_ft_spm_default_params_ft_spm1_idx` (`spm_id` ASC)/*,
  CONSTRAINT `fk_ft_spm_default_params_ft_spm1`
    FOREIGN KEY (`spm_id`)
    REFERENCES `ft_spm` (`spm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='default parameter to use when computing the stat limits of a new spm version';


-- -----------------------------------------------------
-- Table `ft_spm_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_log` ;

CREATE TABLE `ft_spm_log` (
  `log_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `execution_type` VARCHAR(1) NOT NULL COMMENT 'M (manual), I (insertion) or T (trigger) spm activation',
  `matched_products` VARCHAR(1024) COMMENT 'list of the products on which that particular spm execution resolved',
  `matched_lots` VARCHAR(1024) COMMENT 'list of the lots on which that particular spm execution resolved',
  `matched_sublots` VARCHAR(1024) COMMENT 'list of the sublots/wafers on which that particular spm execution resolved',
  `nb_parts` INT(10) UNSIGNED COMMENT 'number of parts tested according to the resolved products/lots/sublots',
  `nb_splitlot_alarm` INT(10) UNSIGNED COMMENT 'how many splitlot level alarms this spm run raised',
  `status` VARCHAR(45) COMMENT 'status of the execution ie PASS, FAIL, IN PROGRESS...',
  `summary` TEXT COMMENT 'summary of the execution',
  PRIMARY KEY (`log_id`),
  INDEX `fk_ft_spm_log_ft_spm_stat_idx` (`spm_id`, `spm_version_id`, `execution_date`)/*,
  CONSTRAINT `fk_ft_spm_logs_ft_spm_version`
    FOREIGN KEY (`spm_id` , `spm_version_id`)
    REFERENCES `ft_spm_version` (`spm_id` , `spm_version_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='logging of a single spm execution';

-- -----------------------------------------------------
-- Table `ft_spm_alarm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_alarm` ;

CREATE TABLE `ft_spm_alarm` (
  `log_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the log identifier',
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm identifier',
  `spm_version_id` SMALLINT(5) UNSIGNED NOT NULL COMMENT 'foreign key to the spm version identifier',
  `spm_stat_id` INT(10) NOT NULL COMMENT 'foreign key to the spm stat identifier',
  `execution_date` DATETIME NOT NULL COMMENT 'spm task execution date',
  `splitlot_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the first splitlot identifier used to compute the datapoint',
  `test_id` INT(10) UNSIGNED NOT NULL COMMENT 'foreign key to the spm test being evaluated',
  `site_no` SMALLINT(5) NOT NULL COMMENT 'test site number, -1 for merge',
  `exec_count` MEDIUMINT(8) unsigned NOT NULL DEFAULT '0',
  `fail_count` MEDIUMINT(8) unsigned DEFAULT NULL,
  `criticity_level` TINYINT(3) UNSIGNED NOT NULL COMMENT 'stat limits criticity level: ex. 1 (standard) or 2 (critical)',
  `stat_name` VARCHAR(45) NOT NULL COMMENT 'name of the stat being tested',
  `stat_ll` DOUBLE COMMENT 'low limit value, NULL if no limit',
  `stat_hl` DOUBLE COMMENT 'high limit value, NULL if no limit',
  `outlier_value` DOUBLE NOT NULL COMMENT 'value of the detected outlier',
  PRIMARY KEY (`log_id`, `execution_date`, `spm_stat_id`,`splitlot_id`),
  INDEX `fk_ft_spm_alarm_ft_spm_stat_idx` (`spm_id` ASC, `spm_version_id` ASC, `spm_stat_id` ASC)/*,
  CONSTRAINT `fk_ft_spm_alarm_ft_spm_stat`
    FOREIGN KEY (`spm_id` , `spm_version_id` , `spm_stat_id`)
    REFERENCES `ft_spm_stat` (`spm_id` , `spm_version_id` , `spm_stat_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION*/)
ENGINE = InnoDB COMMENT='alarms raised by spm executions';


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
