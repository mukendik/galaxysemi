-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(27, @status, @message);
CALL start_update('GEXDB V3.04 B28 (MySQL)', 304, 28, @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_TRIGGERS', @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_TABLES', @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_PROCEDURES', @status, @message);
CALL add_status('UPDATING_INDEXES', @status, @message);

-- ---------------------------------------------------------
-- ADD COLUMNS FOR PRIMARY KEYS
-- ---------------------------------------------------------
CALL add_column_if_not_exists(Database(), 'ft_sublot_info', 'consolidation_ref_date', 'datetime DEFAULT NULL AFTER flags', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sublot_info', 'consolidation_status', 'varchar(255) DEFAULT NULL AFTER flags', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'retest_phase', 'varchar(255) DEFAULT NULL AFTER prod_data', @status, @message);

-- ---------------------------------------------------------
-- CREATE ft_sublot_hbin_inter TABLE
-- ---------------------------------------------------------
DROP TABLE IF EXISTS ft_sublot_hbin_inter;
CREATE TABLE ft_sublot_hbin_inter (
 lot_id varchar(255) NOT NULL,
 sublot_id varchar(255) DEFAULT NULL,
 hbin_no smallint(5) unsigned NOT NULL DEFAULT '0',
 hbin_name varchar(255) NOT NULL DEFAULT '',
 hbin_cat char(1) DEFAULT NULL,
 nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0',
 consolidation_name varchar(255) NOT NULL,
 PRIMARY KEY (lot_id,sublot_id,hbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;
CALL update_log_message('CREATE TABLE','ft_sublot_hbin_inter','DONE',null);

-- ---------------------------------------------------------
-- CREATE ft_sublot_sbin_inter TABLE
-- ---------------------------------------------------------
DROP TABLE IF EXISTS ft_sublot_sbin_inter;
CREATE TABLE ft_sublot_sbin_inter (
 lot_id varchar(255) NOT NULL,
 sublot_id varchar(255) DEFAULT NULL,
 sbin_no smallint(5) unsigned NOT NULL DEFAULT '0',
 sbin_name varchar(255) NOT NULL DEFAULT '',
 sbin_cat char(1) DEFAULT NULL,
 nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0',
 consolidation_name varchar(255) NOT NULL,
 PRIMARY KEY (lot_id,sublot_id,sbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;
CALL update_log_message('CREATE TABLE','ft_sublot_sbin_inter','DONE',null);

-- ---------------------------------------------------------
-- CREATE ft_sublot_consolidation TABLE
-- ---------------------------------------------------------
DROP TABLE IF EXISTS ft_sublot_consolidation;
CREATE TABLE ft_sublot_consolidation (
  lot_id varchar(255) NOT NULL DEFAULT '',
  sublot_id varchar(255) DEFAULT NULL,
  nb_parts mediumint(8) NOT NULL DEFAULT '0',
  nb_parts_good mediumint(8) NOT NULL DEFAULT '0',
  consolidated_data_type varchar(255) NOT NULL,
  consolidation_name varchar(255) NOT NULL,
  consolidation_prod_flow varchar(255) NOT NULL,
  PRIMARY KEY (lot_id,sublot_id,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;
CALL update_log_message('CREATE TABLE','ft_sublot_consolidation','DONE',null);

-- ---------------------------------------------------------
-- CREATE ft_sublot_consolidation_inter TABLE
-- ---------------------------------------------------------
DROP TABLE IF EXISTS ft_sublot_consolidation_inter;
CREATE TABLE ft_sublot_consolidation_inter (
  lot_id varchar(255) NOT NULL DEFAULT '',
  sublot_id varchar(255) DEFAULT NULL,
  nb_parts mediumint(8) NOT NULL DEFAULT '0',
  nb_parts_good mediumint(8) NOT NULL DEFAULT '0',
  consolidated_data_type varchar(255) NOT NULL,
  consolidation_name varchar(255) NOT NULL,
  consolidation_prod_flow varchar(255) NOT NULL,
  PRIMARY KEY (lot_id,sublot_id,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CALL update_log_message('CREATE TABLE','ft_sublot_consolidation_inter','DONE',null);

-- ---------------------------------------------------------
-- CHECK UPDATE DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_b27_to_b28_data;
DELIMITER $$
CREATE PROCEDURE update_b27_to_b28_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;
	
-- Update ft_sublot_info.consolidation_status
	UPDATE ft_sublot_info set consolidation_status='P' where consolidation_status is null and nb_parts > 0;

-- Copy ft_sublot_info into ft_sublot_consolidation
    INSERT into ft_sublot_consolidation
    SELECT 
        lot_id as lot_id, 
        sublot_id as sublot_id,
        nb_parts as nb_parts,
        nb_parts_good as nb_parts_good,
		'PHYSICAL' as consolidated_data_type,
		'' as consolidation_name,
        'Y' as consolidation_prod_flow
    from ft_sublot_info;

    SET OUT_status=1;

	END $$
DELIMITER ;

-- ---------------------------------------------------------
-- UPDATE DATA
-- ---------------------------------------------------------
CALL update_b27_to_b28_data(@status, @message);
DROP PROCEDURE IF EXISTS update_b27_to_b28_data;

-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);


