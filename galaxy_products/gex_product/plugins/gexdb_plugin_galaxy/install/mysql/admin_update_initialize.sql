-- -----------------------------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS:
-- o To customize the update
-- o To execute it manually
-- -----------------------------------------------------------------------------

-- -----------------------------------------------------------------------------
-- Caution messages below are not commented to make sure that
-- scripts are in the right state before to be ran manually
-- -----------------------------------------------------------------------------
CAUTION: when running manually that script make sure to
CAUTION: uncomment the line below to specify a working database
-- use database_name_xx;
CAUTION: when running manually that script make sure to
CAUTION: comment each lines: "DECLARE EXIT HANDLER FOR SQLEXCEPTION"
CAUTION: (if it exists) to be sure to catch all errors

-- -----------------------------------------------------------------------------
-- is_admin_compatible_version
-- -----------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS is_admin_compatible_version;
DELIMITER $$
CREATE PROCEDURE is_admin_compatible_version(
    IN checked_version SMALLINT(5),
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE current_version_build SMALLINT(5) DEFAULT 0;
    DECLARE current_status TEXT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SHOW ERRORS;
        SET OUT_message="Error SQL Exception";
    END;
    SET OUT_status=0;

    SELECT value FROM ym_settings
        WHERE field='DB_BUILD_NB' INTO current_version_build;
    SELECT value FROM ym_settings
        WHERE field='DB_STATUS' INTO current_status;

    -- if the update was stopped before the end
    -- we need to restart at the begining of this update
    IF (LENGTH(current_status) > 0) THEN
        SET current_version_build = current_version_build-1;
    END IF;

    IF current_version_build <> checked_version THEN
        SELECT CONCAT('CHECK ADMIN SERVER VERSION: Incompatible version ',current_version_build,' with ',checked_version) INTO OUT_message;
    ELSE
        SET OUT_status=1;
    END IF;
END $$
DELIMITER ;

-- -----------------------------------------------------------------------------
-- start_admin_update
-- -----------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS start_admin_update;
DELIMITER $$
CREATE PROCEDURE start_admin_update(
    IN IN_db_version_name TEXT,
    IN IN_db_version_build INT,
    IN IN_db_version_number TEXT,
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE new_db_status TEXT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
       SHOW ERRORS;
       SET OUT_message="Error SQL Exception";
    END;
    SET OUT_status=0;

    SELECT CONCAT('Updating the schema definition for ',IN_db_version_build) INTO new_db_status;
    -- Insert the DB_STATUS if not exists (> B18)
    INSERT IGNORE INTO ym_settings VALUES('DB_STATUS',null);
    
    -- Then update the DB
    REPLACE ym_settings(field,value) VALUES('DB_STATUS',new_db_status);
    REPLACE ym_settings(field,value) VALUES('DB_BUILD_NB',IN_db_version_build);
    REPLACE ym_settings(field,value) VALUES('DB_VERSION_NB',IN_db_version_number);
    REPLACE ym_settings(field,value) VALUES('DB_VERSION_NAME',IN_db_version_name);

    SET OUT_status=1;
END $$
DELIMITER ;

-- -----------------------------------------------------------------------------
-- stop_admin_update
-- -----------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS stop_admin_update;
DELIMITER $$
CREATE PROCEDURE stop_admin_update(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
       SHOW ERRORS;
       SET OUT_message="Error SQL Exception";
    END;
    SET OUT_status=0;

    REPLACE ym_settings(field,value) VALUES('DB_STATUS',null);

    SET OUT_status=1;
END $$
DELIMITER ;

