-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS:
-- o To customize the update
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(37, @status, @message);
CALL start_update('GEXDB V5.02 B38 (MySQL)', 502, 38, @status, @message);

DROP PROCEDURE IF EXISTS purge_splitlots;

DELIMITER $$
CREATE PROCEDURE `purge_splitlots`()
BEGIN
    -- Remove all invalid splitlots into the TDR except current insertions if any
    DECLARE tdr_table_name VARCHAR(255);
    DECLARE not_found BOOLEAN DEFAULT false;

    DECLARE ft_ignore_splitlots TEXT;
    DECLARE wt_ignore_splitlots TEXT;
    DECLARE et_ignore_splitlots TEXT;

    -- Select all Final Test tables linked to the splitlot_id except ft_splitlot tables
    DECLARE ft_tables CURSOR FOR
        SELECT table_name FROM information_schema.columns
        WHERE table_schema=Database() AND table_name like 'ft%' AND column_name='splitlot_id' AND table_name<>'ft_splitlot';
    -- Select all Wafer Sort tables linked to the splitlot_id except wt_splitlot tables
    DECLARE wt_tables CURSOR FOR
        SELECT table_name FROM information_schema.columns
        WHERE table_schema=Database() AND table_name like 'wt%' AND column_name='splitlot_id' AND table_name<>'wt_splitlot';
    -- Select all Elect Test tables linked to the splitlot_id except et_splitlot tables
    DECLARE et_tables CURSOR FOR
        SELECT table_name FROM information_schema.columns
        WHERE table_schema=Database() AND table_name like 'et%' AND column_name='splitlot_id' AND table_name<>'et_splitlot';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE;

    -- Clean Final Test tables
    IF EXISTS (SELECT splitlot_id FROM ft_splitlot WHERE valid_splitlot='N') THEN
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Final Test tables - START');
        -- Don't purge current insertion if any
        -- All active insertions are materialized with a splitlot_id < 201000000
        SELECT concat(' AND splitlot_id NOT IN (',group_concat(S.splitlot_id separator ','),')') INTO ft_ignore_splitlots FROM ft_splitlot S WHERE
            lot_id IN (SELECT lot_id FROM ft_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND sublot_id IN (SELECT sublot_id FROM ft_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND start_t IN (SELECT start_t FROM ft_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY));

        IF (ft_ignore_splitlots IS NULL) THEN
            SELECT '' INTO ft_ignore_splitlots;
        END IF;

        OPEN ft_tables;
            SET not_found = false;
            REPEAT
                FETCH ft_tables INTO tdr_table_name;
                IF NOT not_found THEN
                    -- Remove any lines from summary and results tables
                    SET @ddl=CONCAT('DELETE FROM ',tdr_table_name,
                        ' WHERE splitlot_id IN (SELECT splitlot_id FROM ft_splitlot WHERE valid_splitlot=''N''',ft_ignore_splitlots,')');
                    PREPARE stmt FROM @ddl;
                    EXECUTE stmt;
                END IF;
            UNTIL not_found = true
            END REPEAT;
        CLOSE ft_tables;
        -- Remove any lines from splitlot table
        SET @ddl=CONCAT('DELETE FROM ft_splitlot WHERE valid_splitlot=''N''',ft_ignore_splitlots);
        PREPARE stmt FROM @ddl;
        EXECUTE stmt;
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Final Test tables - DONE');
    END IF;


    -- Clean Wafer Sort tables
    IF EXISTS (SELECT splitlot_id FROM wt_splitlot WHERE valid_splitlot='N') THEN
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Wafer Sort tables - START');
        -- Don't purge current insertion if any
        -- All active insertions are materialized with a splitlot_id < 201000000
        SELECT concat(' AND splitlot_id NOT IN (',group_concat(S.splitlot_id separator ','),')') INTO wt_ignore_splitlots FROM wt_splitlot S WHERE
            lot_id IN (SELECT lot_id FROM wt_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND sublot_id IN (SELECT sublot_id FROM wt_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND wafer_id IN (SELECT wafer_id FROM wt_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND start_t IN (SELECT start_t FROM wt_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY));

        IF (wt_ignore_splitlots IS NULL) THEN
            SELECT '' INTO wt_ignore_splitlots;
        END IF;
        OPEN wt_tables;
            SET not_found = false;
            REPEAT
                FETCH wt_tables INTO tdr_table_name;
                IF NOT not_found THEN
                    -- Remove any lines from summary and results tables
                    SET @ddl=CONCAT('DELETE FROM ',tdr_table_name,
                        ' WHERE splitlot_id IN (SELECT splitlot_id FROM wt_splitlot WHERE valid_splitlot=''N''',wt_ignore_splitlots,')');
                    PREPARE stmt FROM @ddl;
                    EXECUTE stmt;
                END IF;
            UNTIL not_found = true
            END REPEAT;
        CLOSE wt_tables;
        -- Remove any lines from splitlot table
        SET @ddl=CONCAT('DELETE FROM wt_splitlot WHERE valid_splitlot=''N''',wt_ignore_splitlots);
        PREPARE stmt FROM @ddl;
        EXECUTE stmt;
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Wafer Sort tables - DONE');
    END IF;

    -- Clean Elect Test tables
    IF EXISTS (SELECT splitlot_id FROM et_splitlot WHERE valid_splitlot='N') THEN
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Elect Test tables - START');
        -- Don't purge current insertion if any
        -- All active insertions are materialized with a splitlot_id < 201000000
        SELECT concat(' AND splitlot_id NOT IN (',group_concat(S.splitlot_id separator ','),')') INTO et_ignore_splitlots FROM et_splitlot S WHERE
            lot_id IN (SELECT lot_id FROM et_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND sublot_id IN (SELECT sublot_id FROM et_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND wafer_id IN (SELECT wafer_id FROM et_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY))
            AND start_t IN (SELECT start_t FROM et_splitlot WHERE valid_splitlot='N' AND splitlot_id<201000000 AND from_unixtime(insertion_time)>adddate(now(), INTERVAL -1 DAY));

        IF (et_ignore_splitlots IS NULL) THEN
            SELECT '' INTO et_ignore_splitlots;
        END IF;
        OPEN et_tables;
            SET not_found = false;
            REPEAT
                FETCH et_tables INTO tdr_table_name;
                IF NOT not_found THEN
                    -- Remove any lines from summary and results tables
                    SET @ddl=CONCAT('DELETE FROM ',tdr_table_name,
                        ' WHERE splitlot_id IN (SELECT splitlot_id FROM et_splitlot WHERE valid_splitlot=''N''',et_ignore_splitlots,')');
                    PREPARE stmt FROM @ddl;
                    EXECUTE stmt;
                END IF;
            UNTIL not_found = true
            END REPEAT;
        CLOSE et_tables;
        -- Remove any lines from splitlot table
        SET @ddl=CONCAT('DELETE FROM et_splitlot WHERE valid_splitlot=''N''',et_ignore_splitlots);
        PREPARE stmt FROM @ddl;
        EXECUTE stmt;
        INSERT INTO gexdb_log(log_date,log_type,log_string) values(now(),'purge_splitlots','Clean Elect Test tables - DONE');
    END IF;

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS purge_invalid_splitlots;

DELIMITER $$
CREATE PROCEDURE `purge_invalid_splitlots`()
BEGIN
    CALL purge_splitlots();
END $$
DELIMITER ;


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
