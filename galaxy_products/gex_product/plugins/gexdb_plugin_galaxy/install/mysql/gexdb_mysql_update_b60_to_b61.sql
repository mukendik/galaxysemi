-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS:
-- o To customize the update
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(60, @status, @message);
CALL start_update('GEXDB V5.14 B61 (MySQL)', 514, 61, @status, @message);

CALL add_column_if_not_exists(Database(),'et_spm','auto_recompute_method','varchar(45) NOT NULL', @status, @message);
CALL add_column_if_not_exists(Database(),'wt_spm','auto_recompute_method','varchar(45) NOT NULL', @status, @message);
CALL add_column_if_not_exists(Database(),'ft_spm','auto_recompute_method','varchar(45) NOT NULL', @status, @message);

CALL modify_column(Database(),'et_spm_log','matched_sublots','TEXT',@status, @message);
CALL modify_column(Database(),'wt_spm_log','matched_sublots','TEXT',@status, @message);
CALL modify_column(Database(),'ft_spm_log','matched_sublots','TEXT',@status, @message);

CALL rename_column(Database(),'et_spm_log','nb_splitlot_alarm','nb_alarms',@status, @message);
CALL rename_column(Database(),'wt_spm_log','nb_splitlot_alarm','nb_alarms',@status, @message);
CALL rename_column(Database(),'ft_spm_log','nb_splitlot_alarm','nb_alarms',@status, @message);

-- -----------------------------------------------------
-- Table `et_spm_filters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `et_spm_filters` ;

CREATE TABLE `et_spm_filters` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique identifier of the spm task',
  `field` VARCHAR(255) NOT NULL COMMENT 'field from et_splitlot table or et_splitlot_metadata on which the spm task must be executed',
  `value` VARCHAR(1024) NOT NULL COMMENT 'value on which the spm task must be executed',
  PRIMARY KEY (`spm_id`,`field`))
ENGINE = InnoDB COMMENT='describes the custom filters on a spm task';

-- -----------------------------------------------------
-- Table `ft_spm_filters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ft_spm_filters` ;

CREATE TABLE `ft_spm_filters` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique identifier of the spm task',
  `field` VARCHAR(255) NOT NULL COMMENT 'field from ft_splitlot table or ft_splitlot_metadata on which the spm task must be executed',
  `value` VARCHAR(1024) NOT NULL COMMENT 'value on which the spm task must be executed',
  PRIMARY KEY (`spm_id`,`field`))
ENGINE = InnoDB COMMENT='describes the custom filters on a spm task';

-- -----------------------------------------------------
-- Table `wt_spm_filters`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wt_spm_filters` ;

CREATE TABLE `wt_spm_filters` (
  `spm_id` INT(10) UNSIGNED NOT NULL COMMENT 'Unique identifier of the spm task',
  `field` VARCHAR(255) NOT NULL COMMENT 'field from wt_splitlot table or wt_splitlot_metadata on which the spm task must be executed',
  `value` VARCHAR(1024) NOT NULL COMMENT 'value on which the spm task must be executed',
  PRIMARY KEY (`spm_id`,`field`))
ENGINE = InnoDB COMMENT='describes the custom filters on a spm task';


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
