-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS:
-- o To customize the update
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(69, @status, @message);
CALL start_update('GEXDB V6.00 B70 (MySQL)', 600, 70, @status, @message);
CALL add_status('UPDATING_INDEXES', @status, @message);

-- CONSOLIDATION PROCESS ENHANCEMENT
-- UPDATE XX_WAFER_INFO/FT_SUBLOT_INFO
CALL add_column_if_not_exists(Database(), 'et_wafer_info', 'consolidation_algo', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_info', 'consolidation_status', 'char(1) DEFAULT NULL COMMENT \'consolidation status of the wafer\'', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_info', 'consolidation_summary', 'TEXT DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_info', 'consolidation_date', 'datetime DEFAULT NULL COMMENT \'date of the consolidation\'', @status, @message);

CALL add_column_if_not_exists(Database(), 'wt_wafer_info', 'consolidation_algo', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'wt_wafer_info', 'consolidation_status', 'char(1) DEFAULT NULL COMMENT \'consolidation status of the wafer\'', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_wafer_info', 'consolidation_summary', 'TEXT DEFAULT NULL', @status, @message);
CALL rename_column(           Database(), 'wt_wafer_info', 'consolidation_ref_date', 'consolidation_date', @status, @message);
CALL modify_column(           Database(), 'wt_wafer_info', 'consolidation_date', 'datetime DEFAULT NULL COMMENT \'date of the consolidation\'', @status, @message);

CALL add_column_if_not_exists(Database(), 'ft_sublot_info', 'consolidation_algo', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'ft_sublot_info', 'consolidation_status', 'char(1) DEFAULT NULL COMMENT \'consolidation status of the wafer\'', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sublot_info', 'consolidation_summary', 'TEXT DEFAULT NULL', @status, @message);
CALL rename_column(           Database(), 'ft_sublot_info', 'consolidation_ref_date', 'consolidation_date', @status, @message);
CALL modify_column(           Database(), 'ft_sublot_info', 'consolidation_date', 'datetime DEFAULT NULL COMMENT \'date of the consolidation\'', @status, @message);

-- UPDATE XX_SPLITLOT FOR CONSOLIDATION

CALL modify_column(           Database(), 'et_splitlot', 'wafer_id', 'VARCHAR(255) NULL DEFAULT NULL COMMENT \'foreign key to the wafer identifier\' AFTER `sublot_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'product_name', 'VARCHAR(255) DEFAULT NULL AFTER `wafer_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'retest_index', 'tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'Retest index within a phase (0 for initial test, 1 for first retest, ...)\' AFTER `prod_data`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'retest_hbins', 'varchar(255) DEFAULT NULL COMMENT \'Retested hard bins in case of LINEAR consolidation, test/retest consolidation algorithm in case of STACKED consolidation.\' AFTER `retest_index`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'test_insertion', 'varchar(255) DEFAULT NULL COMMENT \'Test insertion name in case of multiple insertions to generate the consolidation result\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'test_flow', 'varchar(45) DEFAULT NULL COMMENT \'Test flow name in case of multiple flows. This can allow an additional consolidation granularity.\' AFTER `test_insertion`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'et_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL COMMENT \'Indicates the index of the insertion for multi-insertions\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'mode_cod', 'char(1) DEFAULT NULL COMMENT \'test mode code (prod, test...)\' AFTER `exec_ver`', @status, @message);

CALL modify_column(           Database(), 'wt_splitlot', 'wafer_id', 'VARCHAR(255) NULL DEFAULT NULL COMMENT \'foreign key to the wafer identifier\' AFTER `sublot_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'product_name', 'VARCHAR(255) DEFAULT NULL AFTER `wafer_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'retest_index', 'tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'Retest index within a phase (0 for initial test, 1 for first retest, ...)\' AFTER `prod_data`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'retest_hbins', 'varchar(255) DEFAULT NULL COMMENT \'Retested hard bins in case of LINEAR consolidation, test/retest consolidation algorithm in case of STACKED consolidation.\' AFTER `retest_index`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'test_insertion', 'varchar(255) DEFAULT NULL COMMENT \'Test insertion name in case of multiple insertions to generate the consolidation result\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'test_flow', 'varchar(45) DEFAULT NULL COMMENT \'Test flow name in case of multiple flows. This can allow an additional consolidation granularity.\' AFTER `test_insertion`', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'wt_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL COMMENT \'Indicates the index of the insertion for multi-insertions\' AFTER `retest_hbins`', @status, @message);

CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'product_name', 'VARCHAR(255) DEFAULT NULL AFTER `sublot_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'retest_index', 'tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'Retest index within a phase (0 for initial test, 1 for first retest, ...)\' AFTER `prod_data`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'retest_hbins', 'varchar(255) DEFAULT NULL COMMENT \'Retested hard bins in case of LINEAR consolidation, test/retest consolidation algorithm in case of STACKED consolidation.\' AFTER `retest_index`', @status, @message);
CALL rename_column(           Database(), 'ft_splitlot', 'retest_phase', 'test_insertion', @status, @message);
CALL modify_column(           Database(), 'ft_splitlot', 'test_insertion', 'varchar(255) DEFAULT NULL COMMENT \'Test insertion name in case of multiple insertions to generate the consolidation result\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'test_flow', 'varchar(45) DEFAULT NULL COMMENT \'Test flow name in case of multiple flows. This can allow an additional consolidation granularity.\' AFTER `test_insertion`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'ft_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL COMMENT \'Indicates the index of the insertion for multi-insertions\' AFTER `retest_hbins`', @status, @message);

CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'product_name', 'VARCHAR(255) DEFAULT NULL AFTER `sublot_id`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'retest_index', 'tinyint(3) unsigned NOT NULL DEFAULT \'0\' COMMENT \'Retest index within a phase (0 for initial test, 1 for first retest, ...)\' AFTER `prod_data`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'retest_hbins', 'varchar(255) DEFAULT NULL COMMENT \'Retested hard bins in case of LINEAR consolidation, test/retest consolidation algorithm in case of STACKED consolidation.\' AFTER `retest_index`', @status, @message);
CALL rename_column(           Database(), 'ft_gtl_splitlot', 'retest_phase', 'test_insertion', @status, @message);
CALL modify_column(           Database(), 'ft_gtl_splitlot', 'test_insertion', 'varchar(255) DEFAULT NULL COMMENT \'Test insertion name in case of multiple insertions to generate the consolidation result\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'test_insertion', 'varchar(255) DEFAULT NULL COMMENT \'Test insertion name in case of multiple insertions to generate the consolidation result\' AFTER `retest_hbins`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'test_flow', 'varchar(45) DEFAULT NULL COMMENT \'Test flow name in case of multiple flows. This can allow an additional consolidation granularity.\' AFTER `test_insertion`', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_gtl_splitlot', 'test_insertion_index', 'tinyint(1) DEFAULT NULL COMMENT \'Indicates the index of the insertion for multi-insertions\' AFTER `retest_hbins`', @status, @message);

DROP PROCEDURE IF EXISTS update_product_name;
DELIMITER $$
CREATE PROCEDURE update_product_name(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;

-- Populate the new XX_SPLITLOT.PRODUCT_NAME
-- with data from XX_WAFER/SUBLOT_INFO.PRODUCT_NAME
  UPDATE ft_splitlot S INNER JOIN ft_sublot_info SI ON S.lot_id=SI.lot_id AND S.sublot_id=SI.sublot_id
    SET S.product_name=SI.product_name;
  
  UPDATE ft_gtl_splitlot S SET S.product_name=S.part_typ;

  UPDATE wt_splitlot S INNER JOIN wt_wafer_info WI ON S.lot_id=WI.lot_id AND S.wafer_id=WI.wafer_id
    SET S.product_name=WI.product_name;
  
  UPDATE et_splitlot S INNER JOIN et_wafer_info WI ON S.lot_id=WI.lot_id AND S.wafer_id=WI.wafer_id
    SET S.product_name=WI.product_name;

-- Update the empty test_insertion
  UPDATE et_splitlot SET test_insertion='default' WHERE test_insertion IS NULL OR test_insertion='';
  UPDATE wt_splitlot SET test_insertion='default' WHERE test_insertion IS NULL OR test_insertion='';
  UPDATE ft_splitlot SET test_insertion='default' WHERE test_insertion IS NULL OR test_insertion='';

-- Update the new test_flow
  UPDATE et_splitlot SET test_flow=mode_cod WHERE prod_data='Y' AND test_flow IS NULL;
  UPDATE wt_splitlot SET test_flow=mode_cod WHERE prod_data='Y' AND test_flow IS NULL;
  UPDATE ft_splitlot SET test_flow=mode_cod WHERE prod_data='Y' AND test_flow IS NULL;


  SET OUT_status=1;

END $$
DELIMITER ;
CALL update_product_name(@status, @message);
DROP PROCEDURE update_product_name;


-- ---------------------------------------------------------
-- ALIGN E-TEST SCHEMA FOR CONSOLIDATION
-- ---------------------------------------------------------

--
-- Table structure for table et_wafer_hbin_inter
--
DROP TABLE IF EXISTS et_wafer_hbin_inter;
CREATE TABLE et_wafer_hbin_inter (
  lot_id varchar(255) NOT NULL COMMENT 'foreign key to the lot internal identifier',
  wafer_id varchar(255) NOT NULL DEFAULT '' COMMENT 'foreign key to the wafer internal identifier',
  hbin_no smallint(5) unsigned NOT NULL COMMENT 'number (identifier) of the bin being consolidated',
  hbin_name varchar(255) NOT NULL DEFAULT '' COMMENT 'verbose name of the bin being consolidated',
  hbin_cat char(1) DEFAULT NULL COMMENT 'P (test passed) or F (test failed) category associated with the bin',
  nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'consolidated number of parts in that bin',
  consolidation_name varchar(255) NOT NULL COMMENT 'name of the consolidation in progress',
  PRIMARY KEY (lot_id,wafer_id,hbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='intermediate consolidation of the W.T. hardware binning at wafer level, as specified by the consolidation tree';

--
-- Table structure for table et_wafer_sbin_inter
--
DROP TABLE IF EXISTS et_wafer_sbin_inter;
CREATE TABLE et_wafer_sbin_inter (
  lot_id varchar(255) NOT NULL COMMENT 'foreign key to the lot internal identifier',
  wafer_id varchar(255) NOT NULL DEFAULT '' COMMENT 'foreign key to the wafer internal identifier',
  sbin_no smallint(5) unsigned NOT NULL COMMENT 'number (identifier) of the bin being consolidated',
  sbin_name varchar(255) NOT NULL DEFAULT '' COMMENT 'verbose name of the bin being consolidated',
  sbin_cat char(1) DEFAULT NULL COMMENT 'P (test passed) or F (test failed) category associated with the bin',
  nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'consolidated number of parts in that bin',
  consolidation_name varchar(255) NOT NULL COMMENT 'name of the consolidation in progress',
  PRIMARY KEY (lot_id,wafer_id,sbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='intermediate consolidation of the W.T. software binning at wafer level, as specified by the consolidation tree';

--
-- Table structure for table et_wafer_consolidation
--
DROP TABLE IF EXISTS et_wafer_consolidation;
CREATE TABLE et_wafer_consolidation (
  lot_id varchar(255) NOT NULL DEFAULT '',
  wafer_id varchar(255) NOT NULL DEFAULT '',
  nb_parts mediumint(8) NOT NULL DEFAULT '0',
  nb_parts_good mediumint(8) NOT NULL DEFAULT '0',
  consolidated_data_type varchar(45) DEFAULT NULL,
  consolidation_name varchar(255) NOT NULL,
  consolidation_prod_flow char(1) NOT NULL,
  PRIMARY KEY (lot_id,wafer_id,consolidation_name,consolidation_prod_flow)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='wafer consolidation informations';

--
-- Table structure for table et_wafer_consolidation_inter
--
DROP TABLE IF EXISTS et_wafer_consolidation_inter;
CREATE TABLE et_wafer_consolidation_inter (
  lot_id varchar(255) NOT NULL DEFAULT '',
  wafer_id varchar(255) NOT NULL DEFAULT '',
  nb_parts mediumint(8) NOT NULL DEFAULT '0',
  nb_parts_good mediumint(8) NOT NULL DEFAULT '0',
  consolidated_data_type varchar(45) DEFAULT NULL,
  consolidation_name varchar(255) NOT NULL,
  consolidation_prod_flow char(1) NOT NULL,
  PRIMARY KEY (lot_id,wafer_id,consolidation_name,consolidation_prod_flow)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='wafer intermediate consolidation informations';

-- ---------------------------------------------------------
-- UPDATE XX_WAFER/SUBLOT_CONSOLIDATION WITH GOOD TYPE
-- ---------------------------------------------------------

CALL modify_column(           Database(), 'wt_wafer_consolidation', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'wt_wafer_consolidation', 'consolidation_prod_flow', 'char(1) NOT NULL', @status, @message);
CALL add_primary_key_to(      Database(), 'wt_wafer_consolidation', 'lot_id,wafer_id,consolidation_name,consolidation_prod_flow', @status, @message);
CALL modify_column(           Database(), 'wt_wafer_consolidation_inter', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'wt_wafer_consolidation_inter', 'consolidation_prod_flow', 'char(1) NOT NULL', @status, @message);
CALL add_primary_key_to(      Database(), 'wt_wafer_consolidation_inter', 'lot_id,wafer_id,consolidation_name,consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'ft_sublot_consolidation', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'ft_sublot_consolidation', 'consolidation_prod_flow', 'char(1) NOT NULL', @status, @message);
CALL add_primary_key_to(      Database(), 'ft_sublot_consolidation', 'lot_id,sublot_id,consolidation_name,consolidation_prod_flow', @status, @message);
CALL modify_column(           Database(), 'ft_sublot_consolidation_inter', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL modify_column(           Database(), 'ft_sublot_consolidation_inter', 'consolidation_prod_flow', 'char(1) NOT NULL', @status, @message);
CALL add_primary_key_to(      Database(), 'ft_sublot_consolidation_inter', 'lot_id,sublot_id,consolidation_name,consolidation_prod_flow', @status, @message);


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
