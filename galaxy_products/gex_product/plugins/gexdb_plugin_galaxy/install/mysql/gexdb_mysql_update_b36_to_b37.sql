-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(36, @status, @message);
CALL start_update('GEXDB V5.02 B37 (MySQL)', 502, 37, @status, @message);

CALL drop_column_if_exists(Database(), 'incremental_update', 'db_version_build', @status, @message);
CALL drop_column_if_exists(Database(), 'incremental_update', 'max_splitlots', @status, @message);

CALL rename_column(Database(), 'incremental_update', 'initial_splitlots', 'processed_splitlots', @status, @message);
CALL change_column(Database(), 'incremental_update', 'processed_splitlots', 'int(9) DEFAULT 0', @status, @message);
CALL change_column(Database(), 'incremental_update', 'remaining_splitlots', 'int(9) DEFAULT 0', @status, @message);
CALL add_column_if_not_exists(Database(), 'incremental_update', 'status', 'varchar(255) DEFAULT ''DISABLED'' AFTER remaining_splitlots', @status, @message);
CALL add_column_if_not_exists(Database(), 'incremental_update', 'frequency', 'varchar(255) DEFAULT ''*/10 * * * *'' AFTER status', @status, @message);
CALL add_column_if_not_exists(Database(), 'incremental_update', 'max_items', 'int(9) DEFAULT 10 AFTER frequency', @status, @message);
CALL add_column_if_not_exists(Database(), 'incremental_update', 'last_schedule', 'datetime DEFAULT NULL AFTER max_items', @status, @message);
CALL add_column_if_not_exists(Database(), 'incremental_update', 'last_execution', 'datetime DEFAULT NULL AFTER last_schedule', @status, @message);

-- Update the PK for ft_run_dietrace
CALL add_primary_key_to(Database(), 'ft_run_dietrace', 'splitlot_id,run_id,die_config_id,part_id', @status, @message);

-- et_splitlot.spec_nam et_splitlot.spec_ver for WAT files
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'spec_ver',
                              'varchar(255) DEFAULT NULL AFTER proc_id',
                              @status, @message);
CALL add_column_if_not_exists(Database(), 'et_splitlot', 'spec_nam',
                              'varchar(255) DEFAULT NULL AFTER proc_id',
                              @status, @message);

-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
