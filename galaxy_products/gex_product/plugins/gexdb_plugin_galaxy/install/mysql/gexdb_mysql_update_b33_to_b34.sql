-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(33, @status, @message);
CALL start_update('GEXDB V5.00 B34 (MySQL)', 500, 34, @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_PROCEDURES', @status, @message);

-- ---------------------------------------------------------
-- ADD PRODUCT_NAME TO BINNING TABLES
-- ---------------------------------------------------------
CALL add_column_if_not_exists(Database(), 'wt_lot_hbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_lot_hbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_lot_hbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_lot_sbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_lot_sbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_lot_sbin', 'product_name', 'varchar(255) NOT NULL AFTER lot_id', @status, @message);


-- ---------------------------------------------------------
-- ADD PRIMARY KEYS
-- ---------------------------------------------------------
CALL add_primary_key_to(Database(), 'wt_wafer_info', 'lot_id,wafer_id', @status, @message);
CALL add_primary_key_to(Database(), 'et_wafer_info', 'lot_id,wafer_id', @status, @message);
CALL add_primary_key_to(Database(), 'ft_sublot_info', 'lot_id,sublot_id', @status, @message);
CALL add_primary_key_to(Database(), 'wt_lot_hbin', 'lot_id,product_name,hbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'et_lot_hbin', 'lot_id,product_name,hbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'ft_lot_hbin', 'lot_id,product_name,hbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'wt_lot_sbin', 'lot_id,product_name,sbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'et_lot_sbin', 'lot_id,product_name,sbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'ft_lot_sbin', 'lot_id,product_name,sbin_no', @status, @message);
CALL add_primary_key_to(Database(), 'wt_lot', 'lot_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'et_lot', 'lot_id,product_name', @status, @message);
CALL add_primary_key_to(Database(), 'ft_lot', 'lot_id,product_name', @status, @message);

-- ---------------------------------------------------------
-- CHECK UPDATE DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_b33_to_b34_data;
DELIMITER $$
CREATE PROCEDURE update_b33_to_b34_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;
	
    -- Update xt_lot_xbin.product_name
    UPDATE wt_lot_hbin W set product_name= (select product_name from wt_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');
    UPDATE wt_lot_sbin W set product_name= (select product_name from wt_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');
    UPDATE et_lot_hbin W set product_name= (select product_name from et_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');
    UPDATE et_lot_sbin W set product_name= (select product_name from et_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');
    UPDATE ft_lot_hbin W set product_name= (select product_name from ft_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');
    UPDATE ft_lot_sbin W set product_name= (select product_name from ft_lot L where L.lot_id=W.lot_id) where (product_name IS NULL) OR (product_name = '');

    SET OUT_status=1;

	END $$
DELIMITER ;

-- ---------------------------------------------------------
-- UPDATE DATA
-- ---------------------------------------------------------
CALL update_b33_to_b34_data(@status, @message);
DROP PROCEDURE IF EXISTS update_b33_to_b34_data;

-- ---------------------------------------------------------
-- CHECK UPDATE CONSOLIDATED DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_b33_to_b34_consolidated_data;
DELIMITER $$
CREATE PROCEDURE update_b33_to_b34_consolidated_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN

    -- FOR CHARAC TDR, THE CONSOLIDATED TABLES DON'T EXIST
    -- EXIT ON SQLSTATE = 'ER_NO_SUCH_TABLE'
    DECLARE EXIT HANDLER FOR SQLSTATE '42S02' 
        SET OUT_status=1;
        
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;
    
    -- ---------------------------------------------------------
    -- CHECK THE TDR TYPE
    -- FOR PROD TDR, CONSOLIDATED TABLES EXIST
    -- ---------------------------------------------------------
    SELECT count(*) FROM ft_consolidated_tl;
    SELECT count(*) FROM wt_consolidated_tl;
    
    -- ---------------------------------------------------------
    -- ADD PRODUCT_NAME AT TRACKING_LOT LEVEL
    -- ---------------------------------------------------------
    CALL add_column_if_not_exists(Database(), 'az_consolidated_tl_facts', 'ft_product_name', 'varchar(255) NOT NULL AFTER ft_tracking_lot_id', @status, @message);

    -- ---------------------------------------------------------
    -- ADD PRIMARY KEYS
    -- ---------------------------------------------------------
    CALL add_primary_key_to(Database(), 'ft_consolidated_tl', 'product_name,tracking_lot_id', @status, @message);
    CALL add_primary_key_to(Database(), 'wt_consolidated_tl', 'product_name,tracking_lot_id', @status, @message);
    CALL add_primary_key_to(Database(), 'az_consolidated_tl', 'ft_tracking_lot_id,ft_product_name,production_stage', @status, @message);
    CALL add_primary_key_to(Database(), 'az_consolidated_tl_data', 'ft_tracking_lot_id,ft_product_name', @status, @message);
    CALL add_primary_key_to(Database(), 'az_consolidated_tl_facts', 'ft_tracking_lot_id,ft_product_name,production_stage', @status, @message);


    -- Update az info
    UPDATE az_consolidated_tl_facts F set ft_product_name= (select distinct ft_product_name from az_consolidated_tl T where T.ft_tracking_lot_id=F.ft_tracking_lot_id) where (ft_product_name IS NULL) OR (ft_product_name = '');

    SET OUT_status=1;

	END $$
DELIMITER ;

-- ---------------------------------------------------------
-- UPDATE DATA
-- ---------------------------------------------------------
CALL update_b33_to_b34_consolidated_data(@status, @message);
DROP PROCEDURE IF EXISTS update_b33_to_b34_consolidated_data;

-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);


