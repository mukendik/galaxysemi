-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(70, @status, @message);
CALL start_update('GEXDB V6.00 B71 (MySQL)', 600, 71, @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_TRIGGERS', @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_TABLES', @status, @message);
CALL add_status('UPDATING_CONSOLIDATION_PROCEDURES', @status, @message);
CALL add_status('UPDATING_INDEXES', @status, @message);

--
-- Table structure for table et_wafer_hbin_inter
--
DROP TABLE IF EXISTS et_wafer_hbin_inter;
CREATE TABLE et_wafer_hbin_inter (
  lot_id varchar(255) NOT NULL COMMENT 'foreign key to the lot internal identifier',
  wafer_id varchar(255) NOT NULL DEFAULT '' COMMENT 'foreign key to the wafer internal identifier',
  hbin_no smallint(5) unsigned NOT NULL COMMENT 'number (identifier) of the bin being consolidated',
  hbin_name varchar(255) NOT NULL DEFAULT '' COMMENT 'verbose name of the bin being consolidated',
  hbin_cat char(1) DEFAULT NULL COMMENT 'P (test passed) or F (test failed) category associated with the bin',
  nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'consolidated number of parts in that bin',
  consolidation_name varchar(255) NOT NULL COMMENT 'name of the consolidation in progress',
  PRIMARY KEY (lot_id,wafer_id,hbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='intermediate consolidation of the W.T. hardware binning at wafer level, as specified by the consolidation tree';

--
-- Table structure for table et_wafer_sbin_inter
--
DROP TABLE IF EXISTS et_wafer_sbin_inter;
CREATE TABLE et_wafer_sbin_inter (
  lot_id varchar(255) NOT NULL COMMENT 'foreign key to the lot internal identifier',
  wafer_id varchar(255) NOT NULL DEFAULT '' COMMENT 'foreign key to the wafer internal identifier',
  sbin_no smallint(5) unsigned NOT NULL COMMENT 'number (identifier) of the bin being consolidated',
  sbin_name varchar(255) NOT NULL DEFAULT '' COMMENT 'verbose name of the bin being consolidated',
  sbin_cat char(1) DEFAULT NULL COMMENT 'P (test passed) or F (test failed) category associated with the bin',
  nb_parts mediumint(8) unsigned NOT NULL DEFAULT '0' COMMENT 'consolidated number of parts in that bin',
  consolidation_name varchar(255) NOT NULL COMMENT 'name of the consolidation in progress',
  PRIMARY KEY (lot_id,wafer_id,sbin_no,consolidation_name)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='intermediate consolidation of the W.T. software binning at wafer level, as specified by the consolidation tree';

-- ---------------------------------------------------------
-- ADD NEW COLUMN CONSOLIDATION_FLOW TO XX_WAFER/SUBLOT_XBIN_INTER
-- ---------------------------------------------------------

CALL add_column_if_not_exists(Database(), 'et_wafer_sbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'et_wafer_sbin_inter', 'lot_id,wafer_id,sbin_no,consolidation_name,consolidation_flow', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_hbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'et_wafer_hbin_inter', 'lot_id,wafer_id,hbin_no,consolidation_name,consolidation_flow', @status, @message);

CALL add_column_if_not_exists(Database(), 'wt_wafer_sbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'wt_wafer_sbin_inter', 'lot_id,wafer_id,sbin_no,consolidation_name,consolidation_flow', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_wafer_hbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'wt_wafer_hbin_inter', 'lot_id,wafer_id,hbin_no,consolidation_name,consolidation_flow', @status, @message);

CALL add_column_if_not_exists(Database(), 'ft_sublot_sbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'ft_sublot_sbin_inter', 'lot_id,sublot_id,sbin_no,consolidation_name,consolidation_flow', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sublot_hbin_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(	  Database(), 'ft_sublot_hbin_inter', 'lot_id,sublot_id,hbin_no,consolidation_name,consolidation_flow', @status, @message);

-- ---------------------------------------------------------
-- REPLACE COLUMN CONSOLIDATION_PROD_FLOW FOR XX_WAFER/SUBLOT_CONSOLIDATION
-- ---------------------------------------------------------

CALL modify_column(           Database(), 'et_wafer_consolidation', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_consolidation', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'et_wafer_consolidation', 'lot_id,wafer_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'et_wafer_consolidation', 'consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'wt_wafer_consolidation', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_wafer_consolidation', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'wt_wafer_consolidation', 'lot_id,wafer_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'wt_wafer_consolidation', 'consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'ft_sublot_consolidation', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sublot_consolidation', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'ft_sublot_consolidation', 'lot_id,sublot_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'ft_sublot_consolidation', 'consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'et_wafer_consolidation_inter', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_wafer_consolidation_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'et_wafer_consolidation_inter', 'lot_id,wafer_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'et_wafer_consolidation_inter', 'consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'wt_wafer_consolidation_inter', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_wafer_consolidation_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'wt_wafer_consolidation_inter', 'lot_id,wafer_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'wt_wafer_consolidation_inter', 'consolidation_prod_flow', @status, @message);

CALL modify_column(           Database(), 'ft_sublot_consolidation_inter', 'consolidated_data_type', 'varchar(45) DEFAULT NULL', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sublot_consolidation_inter', 'consolidation_flow', 'varchar(45) NOT NULL DEFAULT \'P\'', @status, @message);
CALL add_primary_key_to(      Database(), 'ft_sublot_consolidation_inter', 'lot_id,sublot_id,consolidation_name,consolidation_flow', @status, @message);
CALL drop_column_if_exists(	  Database(), 'ft_sublot_consolidation_inter', 'consolidation_prod_flow', @status, @message);

-- ---------------------------------------------------------
-- CHECK UPDATE DATA PROCEDURE
-- ---------------------------------------------------------
DROP PROCEDURE IF EXISTS update_data;
DELIMITER $$
CREATE PROCEDURE update_data(
    OUT OUT_status SMALLINT(1),
    OUT OUT_message text)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
       SET OUT_message="Error SQL Exception";
    SET OUT_status=0;


    -- Update the consolidation flow for binning tables
    UPDATE et_wafer_sbin_inter b INNER JOIN et_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;
    UPDATE et_wafer_hbin_inter b INNER JOIN et_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;

    UPDATE wt_wafer_sbin_inter b INNER JOIN wt_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;
    UPDATE wt_wafer_hbin_inter b INNER JOIN wt_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;

    UPDATE ft_sublot_sbin_inter b INNER JOIN ft_splitlot s ON b.lot_id=s.lot_id AND b.sublot_id=s.sublot_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;
    UPDATE ft_sublot_hbin_inter b INNER JOIN ft_splitlot s ON b.lot_id=s.lot_id AND b.sublot_id=s.sublot_id AND s.prod_data='Y' AND s.test_flow IS NULL
    	SET b.consolidation_flow=s.test_flow;

    -- Update the consolidation flow for consolidation tables
    UPDATE et_wafer_consolidation b INNER JOIN et_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;
    UPDATE et_wafer_consolidation_inter b INNER JOIN et_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;

    UPDATE wt_wafer_consolidation b INNER JOIN wt_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;
    UPDATE wt_wafer_consolidation_inter b INNER JOIN wt_splitlot s ON b.lot_id=s.lot_id AND b.wafer_id=s.wafer_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;

    UPDATE ft_sublot_consolidation b INNER JOIN ft_splitlot s ON b.lot_id=s.lot_id AND b.sublot_id=s.sublot_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;
    UPDATE ft_sublot_consolidation_inter b INNER JOIN ft_splitlot s ON b.lot_id=s.lot_id AND b.sublot_id=s.sublot_id AND s.prod_data='Y' AND s.test_flow IS NULL
		SET b.consolidation_flow=s.test_flow;

    SET OUT_status=1;
END $$
DELIMITER ;
CALL update_data(@status, @message);
DROP PROCEDURE update_data;


-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);
