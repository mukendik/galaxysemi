-- ---------------------------------------------------------
-- DO NOT EDIT THIS FILE UNLESS: 
-- o To customize the update 
-- o To execute it manually
-- ---------------------------------------------------------

-- ---------------------------------------------------------
-- CAUTION/INFO/QUESTION messages below are not commented to make sure that 
-- scripts are in the right state before to be ran manually
-- ---------------------------------------------------------
CAUTION: When manually running this script, perform the following four steps:
CAUTION: 1. Uncomment the line below and specify a working database.
-- use database_name_xx;
CAUTION: 2. To catch all errors, comment each line "DECLARE EXIT HANDLER FOR SQLEXCEPTION" (if it exists) as shown below:
CAUTION: -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
CAUTION: 3. Before running the first TDR update script, run the script common_update_initialize.sql, then tdr_update_initialize.sql.
CAUTION: 4. After running the last TDR update script, run the script tdr_update_finalize.sql, then common_update_finalize.sql.

-- ---------------------------------------------------------
-- START UPDATE
-- ---------------------------------------------------------
CALL is_compatible_version(34, @status, @message);
CALL start_update('GEXDB V5.00 B35 (MySQL)', 500, 35, @status, @message);
CALL add_status('UPDATING_INDEXES', @status, @message);

--
-- Table structure for table ft_ptest_rollinglimits
--

DROP TABLE IF EXISTS ft_ptest_rollinglimits;

CREATE TABLE ft_ptest_rollinglimits
(
  splitlot_id int(10) unsigned NOT NULL DEFAULT '0',
  ptest_info_id smallint(5) unsigned NOT NULL DEFAULT '0',
  run_id mediumint(8) unsigned NOT NULL,
  limit_index int(10) unsigned NOT NULL,
  limit_type char(1) NOT NULL,
  limit_mode int(10) unsigned NOT NULL,
  LL float DEFAULT NULL,
  HL float DEFAULT NULL,
  PRIMARY KEY (splitlot_id,ptest_info_id,run_id,limit_index)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_ptest_rollingstats
--

DROP TABLE IF EXISTS ft_ptest_rollingstats;

CREATE TABLE ft_ptest_rollingstats (
  splitlot_id int(10) NOT NULL,
  ptest_info_id smallint(5) unsigned NOT NULL,
  run_id mediumint(8) unsigned NOT NULL,
  distribution_shape varchar (255),
  n_factor float,
  t_factor float,
  mean float,
  sigma float,
  min float,
  q1 float,
  median float,
  q3 float,
  max float,
  exec_count mediumint(8) unsigned NOT NULL DEFAULT '0',
  fail_count mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (splitlot_id,ptest_info_id,run_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_mptest_rollinglimits
--

DROP TABLE IF EXISTS ft_mptest_rollinglimits;

CREATE TABLE ft_mptest_rollinglimits
(
  splitlot_id int(10) unsigned NOT NULL DEFAULT '0',
  mptest_info_id smallint(5) unsigned NOT NULL DEFAULT '0',
  run_id mediumint(8) unsigned NOT NULL,
  limit_index int(10) unsigned NOT NULL,
  limit_type char(1) NOT NULL,
  limit_mode int(10) unsigned NOT NULL,
  LL float DEFAULT NULL,
  HL float DEFAULT NULL,
  PRIMARY KEY (splitlot_id,mptest_info_id,run_id,limit_index)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_mptest_rollingstats
--

DROP TABLE IF EXISTS ft_mptest_rollingstats;

CREATE TABLE ft_mptest_rollingstats
(
  splitlot_id int(10) unsigned NOT NULL,
  mptest_info_id smallint(5) unsigned NOT NULL ,
  run_id mediumint(8) unsigned NOT NULL,
  distribution_shape varchar (255),
  n_factor float,
  t_factor float,
  mean float,
  sigma float,
  min float,
  q1 float,
  median float,
  q3 float,
  max float,
  exec_count mediumint(8) unsigned NOT NULL DEFAULT '0',
  fail_count mediumint(8) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (splitlot_id,mptest_info_id,run_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_event
--

DROP TABLE IF EXISTS ft_event;

CREATE TABLE ft_event
(
  splitlot_id int(10) NOT NULL,
  event_id int(10) NOT NULL,
  run_id mediumint(8) unsigned NOT NULL ,
  event_type varchar (255),
  event_subtype varchar (255),
  event_time_local DATETIME,
  event_time_utc DATETIME,
  event_message blob,
  PRIMARY KEY (splitlot_id,event_id)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_ptest_outliers
--

DROP TABLE IF EXISTS ft_ptest_outliers;

CREATE TABLE ft_ptest_outliers
(
  splitlot_id int(10) unsigned NOT NULL,
  ptest_info_id smallint(5) unsigned NOT NULL,
  run_id mediumint(8) unsigned NOT NULL,
  run_index int(10) unsigned NOT NULL,
  limits_run_id mediumint(8) unsigned NOT NULL,
  limit_type char(1) NOT NULL,
  value float,
  PRIMARY KEY (splitlot_id,ptest_info_id,run_id,run_index)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

--
-- Table structure for table ft_mptest_outliers
--

DROP TABLE IF EXISTS ft_mptest_outliers;

CREATE TABLE ft_mptest_outliers
(
  splitlot_id int(10) unsigned NOT NULL,
  mptest_info_id smallint(5) unsigned NOT NULL,
  run_id mediumint(8) unsigned NOT NULL,
  run_index int(10) unsigned NOT NULL,
  limits_run_id mediumint(8) unsigned NOT NULL,
  limit_type char(1) NOT NULL,
  value float,
  PRIMARY KEY (splitlot_id,mptest_info_id,run_id,run_index)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ;

-- ---------------------------------------------------------
-- ALTER TABLES
-- ---------------------------------------------------------

CALL add_column_if_not_exists(Database(), 'et_hbin', 'bin_subfamily', 'varchar(255) AFTER bin_count', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_hbin', 'bin_family', 'varchar(255) AFTER bin_count', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_sbin', 'bin_subfamily', 'varchar(255) AFTER bin_count', @status, @message);
CALL add_column_if_not_exists(Database(), 'et_sbin', 'bin_family', 'varchar(255) AFTER bin_count', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_hbin', 'bin_subfamily', 'varchar(255) AFTER hbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_hbin', 'bin_family', 'varchar(255) AFTER hbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sbin', 'bin_subfamily', 'varchar(255) AFTER sbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_sbin', 'bin_family', 'varchar(255) AFTER sbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_hbin', 'bin_subfamily', 'varchar(255) AFTER hbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_hbin', 'bin_family', 'varchar(255) AFTER hbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_sbin', 'bin_subfamily', 'varchar(255) AFTER sbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'wt_sbin', 'bin_family', 'varchar(255) AFTER sbin_cat', @status, @message);
CALL add_column_if_not_exists(Database(), 'ft_splitlot', 'recipe_id', 'int(10) unsigned AFTER year_and_quarter', @status, @message);

-- ---------------------------------------------------------
-- STOP UPDATE
-- ---------------------------------------------------------
CALL stop_update(@status, @message);

